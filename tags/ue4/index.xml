<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title> UE4 on Some Title</title>
    <link>https://japan2018.github.io/tags/ue4/</link>
    <description>Recent content in  UE4 on Some Title</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 02 Dec 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://japan2018.github.io/tags/ue4/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Beginners want to make a Rubik&#39;s Cube style thing in UE4 and make it a library for reinforcement learning #6</title>
      <link>https://japan2018.github.io/beginners-want-to-make-a-rubiks-cube-style-thing-in-ue4-and-make-it-a-library-for-reinforcement-learning-#6-fb445/</link>
      <pubDate>Mon, 02 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://japan2018.github.io/beginners-want-to-make-a-rubiks-cube-style-thing-in-ue4-and-make-it-a-library-for-reinforcement-learning-#6-fb445/</guid>
      <description>Continuing from the previous article, this article is about how beginners can make various Python libraries that involve UE4 (almost as a memorandum for themselves...).  First: #1 Last time: #5
Observation We will implement around I will write the control processing around the observed value. Basically, it is necessary to perform processing such as saving after the action, and the column of the action ID is prepared in the prepared SQLite table, so we will add the place to connect with BP to the action module ( I also thought about adding a module that uses PyActor for Observation separately, but I will add it to the action because cooperation with action relations becomes useless and complicated).</description>
    </item>
    
  </channel>
</rss>