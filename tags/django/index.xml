<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Django on Some Title</title>
    <link>https://japan2018.github.io/tags/django/</link>
    <description>Recent content in Django on Some Title</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 02 Jun 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://japan2018.github.io/tags/django/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Story that update of calendar.day_abbr fails on admin screen of django</title>
      <link>https://japan2018.github.io/story-that-update-of-calendar.day_abbr-fails-on-admin-screen-of-django-fcfc2/</link>
      <pubDate>Tue, 02 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://japan2018.github.io/story-that-update-of-calendar.day_abbr-fails-on-admin-screen-of-django-fcfc2/</guid>
      <description># I can no longer add or update models from the admin screen of django  Although the screen can be displayed and operated, the following exception occurs when the update button is pressed.
&amp;quot;AttributeError:&#39;calendar&#39; object has no attribute&#39;day_abbr&#39;&amp;quot; #Cause of application name calendar
The bottom line is that there was an application named calendar.
This seems to have failed because it caused batting with the existing calendar.
I know if it fails with the class name, but I did not anticipate the failure with the application name, so it took a while to find out the cause&amp;hellip;</description>
    </item>
    
    <item>
      <title>Django 5 Beginners Make Simple Apps</title>
      <link>https://japan2018.github.io/django-5-beginners-make-simple-apps-fc6b0/</link>
      <pubDate>Mon, 01 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://japan2018.github.io/django-5-beginners-make-simple-apps-fc6b0/</guid>
      <description>## Introduction  Django A continuation of 4 for beginners to create simple apps. The purpose is to remove complicated things and troublesome things as much as possible, create a simplified web application, and learn the mechanism of Django. Only understand what is connected and how it moves around the backend. Implement CRUD (Create, Read, Update, Delete) as you go, and score if you move safely. Last time I rewrote Class-based-view into Function-view and compared how the two compare to track how Django works.</description>
    </item>
    
    <item>
      <title>Steps to build Django environment with Win10 WSL Ubuntu18.04 &#43; Anaconda &#43; Apache2</title>
      <link>https://japan2018.github.io/steps-to-build-django-environment-with-win10-wsl-ubuntu18.04-anaconda-apache2-f85f1/</link>
      <pubDate>Wed, 06 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://japan2018.github.io/steps-to-build-django-environment-with-win10-wsl-ubuntu18.04-anaconda-apache2-f85f1/</guid>
      <description>I will summarize the procedure to create a development environment of Django + Apache on Ubuntu 18.04 of Windows 10 WSL  Procedure Allow apache2 to access python via mod_wsgi. Also, we will make VScode usable as a remote IDE that can be used with WSL.
 Install anaconda3 Install django Create a django project and migrate Install apache2 Install mod_wsgi Add to apache2 configuration file Enable vscode  Since WSL cannot use systemctl, the operation of apache changes a little, when using anaconda, you need to change the reference setting by yourself unless you install mod_wsgi with pip, it is hard to understand the setting of apache2.</description>
    </item>
    
    <item>
      <title>How to set variables that can be used for the entire Django app ~ convenient for templates ~</title>
      <link>https://japan2018.github.io/how-to-set-variables-that-can-be-used-for-the-entire-django-app-~-convenient-for-templates-~-fda84/</link>
      <pubDate>Sun, 03 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://japan2018.github.io/how-to-set-variables-that-can-be-used-for-the-entire-django-app-~-convenient-for-templates-~-fda84/</guid>
      <description>I think it is often useful to have constants (variables) that can be used throughout the site when creating apps with Django.  For example, the text that is displayed on the entire site, such as the app name and version.
Django uses the Context Processor to retrieve the constants you define. Of course, you can set more than one.
#Environment | Software | Version | |&amp;mdash;|&amp;mdash;| | Nginx | 1.</description>
    </item>
    
    <item>
      <title>Django URL settings</title>
      <link>https://japan2018.github.io/django-url-settings-fb9c3/</link>
      <pubDate>Wed, 29 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://japan2018.github.io/django-url-settings-fb9c3/</guid>
      <description>#Introduction  Here, we will explain the settings related to the URL of django.
Project urls.py settings First, edit urls.py under the project directory as follows.
from django.contrib import admin from django.urls import path, include urlpatterns = [ path(&#39;admin/&#39;, admin.site.urls), path(&#39;&#39;, include(&#39;application name.urls&#39;)), ] The place where it becomes admin/ shows the URL to the management screen. For other pages, we use include in the sense that it is described in urls.</description>
    </item>
    
    <item>
      <title>I don&#39;t know the valueerror</title>
      <link>https://japan2018.github.io/i-dont-know-the-valueerror-f869f/</link>
      <pubDate>Sun, 26 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://japan2018.github.io/i-dont-know-the-valueerror-f869f/</guid>
      <description>raise ValueError(&#39;Unable to configure handler &#39;  ValueError: Unable to configure handler&amp;rsquo;mail_admins&amp;rsquo; How can I fix this error?</description>
    </item>
    
    <item>
      <title>I made a web application with Django</title>
      <link>https://japan2018.github.io/i-made-a-web-application-with-django-fa7a6/</link>
      <pubDate>Mon, 30 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://japan2018.github.io/i-made-a-web-application-with-django-fa7a6/</guid>
      <description>#Introduction  This article was written as a memorandum when I created a web application in Djnago.
#Prerequisite
 The OS environment is CentOS 8.1 running on Virtualbox. Below is the detailed OS information.  # cat /etc/centos-release CentOS Linux release 8.1.1911 (Core)  In this article, Django implements the creation of the TOP page using AdminLTE and the access restriction only for logged-in users. I have summarized it in an article for all five chapters.</description>
    </item>
    
    <item>
      <title>I made Django&#39;s Middleware and made it possible to access request information from anywhere</title>
      <link>https://japan2018.github.io/i-made-djangos-middleware-and-made-it-possible-to-access-request-information-from-anywhere-fab9f/</link>
      <pubDate>Tue, 10 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://japan2018.github.io/i-made-djangos-middleware-and-made-it-possible-to-access-request-information-from-anywhere-fab9f/</guid>
      <description>I started thinking about whether the login user could be stored in the user_created (creator) and user_updated (updater) of the model by common processing.  Until then, I wrote the process to pass user information from view to form and store it in user_created or user_updated.
What is Django middleware? From Official
 Middleware is a framework for adding hooks to Django&amp;rsquo;s request/response handling.
 You can define the process to be performed when sending a request or before returning a response.</description>
    </item>
    
    <item>
      <title>Tips to conveniently use models utils.Choices</title>
      <link>https://japan2018.github.io/tips-to-conveniently-use-models-utils.choices-fbbda/</link>
      <pubDate>Mon, 03 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://japan2018.github.io/tips-to-conveniently-use-models-utils.choices-fbbda/</guid>
      <description># model_utils.Choices  Django, DRF users Are you using model_utils.Choices? We use it conveniently, but basically we often use it for status management.
Is it like this?
class News(models.Model): STATUS = Choices( (&amp;#39;DRAFT&amp;#39;,&amp;#39;draft&amp;#39;), (&amp;#39;CHECK&amp;#39;,&amp;#39;waiting for review&amp;#39;), (&amp;#39;PUBLISHED&amp;#39;,&amp;#39;Public&amp;#39;), ) status = StatusField( choices_name=&amp;#39;STATUS&amp;#39;, help_text=&amp;#34;Status&amp;#34;, default=STATUS.DRAFT, ) title = models.CharField( max_length=1024, null=False, blank=False, default=&amp;#34;&amp;#34;, help_text=&amp;#34;News title&amp;#34; ) body = models.TextField( null=False, blank=False, default=&amp;#34;&amp;#34;, help_text=&amp;#34;News Details&amp;#34; ) What is the explanation (VALUE) of Choice used for?</description>
    </item>
    
    <item>
      <title>Qiita API Oauth with Django</title>
      <link>https://japan2018.github.io/qiita-api-oauth-with-django-f8279/</link>
      <pubDate>Sun, 12 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://japan2018.github.io/qiita-api-oauth-with-django-f8279/</guid>
      <description>#Introduction  There is a convenient API called QiitaAPI for handling Qiita. https://qiita.com/api/v2/docs
Here is a sample to try it out with Django.
Only Oauth is dealt with in this article (other than that, it&amp;rsquo;s just a request)
Register the application from the following URL. https://qiita.com/settings/applications
You will get a Client ID and a Client Secret.
Around authentication ##GET /api/v2/oauth/authorize
Display the authorization screen for the user. If the user authorizes, code is added to the Callback URL specified in the application registration above.</description>
    </item>
    
    <item>
      <title>Create a LINEBot with Django</title>
      <link>https://japan2018.github.io/create-a-linebot-with-django-f9aa5/</link>
      <pubDate>Wed, 08 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://japan2018.github.io/create-a-linebot-with-django-f9aa5/</guid>
      <description>#Introduction  I summarized the article about using LINEBot with Django because it was a little researched and it was old.
For the time being, I will create an Omukai Bot that returns the text sent as an introduction to LINE Bot.
Here article uses SDK, but I&amp;rsquo;m a Python beginner ~~ I can&amp;rsquo;t even throw an HTTP request with Python ~~ I want to do it.
I&amp;rsquo;m a Django beginner with less than a week of Django history.</description>
    </item>
    
    <item>
      <title>Summary of differences between Ruby on rails and Django ~Basics~</title>
      <link>https://japan2018.github.io/summary-of-differences-between-ruby-on-rails-and-django-~basics~-ffae0/</link>
      <pubDate>Sat, 04 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://japan2018.github.io/summary-of-differences-between-ruby-on-rails-and-django-~basics~-ffae0/</guid>
      <description>##1.First of all  I am a beginner who has been programming for 4 months! Since I am studying Ruby on rails and Django, As output, I&amp;rsquo;d like to write the basic code difference! ! :pencil2::beginner: Since I started learning from rails, What about Django in terms of basic rails? It is written from the perspective of: smile: We hope you find it helpful. (Since I am studying, I plan to add and correct it at any time!</description>
    </item>
    
    <item>
      <title>I tried touching Wagtail (1), let&#39;s override the save method.</title>
      <link>https://japan2018.github.io/i-tried-touching-wagtail-1-lets-override-the-save-method.-fe9c6/</link>
      <pubDate>Mon, 23 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://japan2018.github.io/i-tried-touching-wagtail-1-lets-override-the-save-method.-fe9c6/</guid>
      <description>#### INTRODUCTION  Hello
I was developing using Wagtail a while ago. Wagtail&amp;rsquo;s Japanese literature is not very large, so reading English literature is required.
As an engineer, the ability to read English literature is very important, I wish there were references written in Japanese I think many people should think that. I think
So I&amp;rsquo;ll write the code using Wagtail and output it. This is the first of them.</description>
    </item>
    
    <item>
      <title>I want to upload the Django app to heroku</title>
      <link>https://japan2018.github.io/i-want-to-upload-the-django-app-to-heroku-fe79c/</link>
      <pubDate>Thu, 07 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://japan2018.github.io/i-want-to-upload-the-django-app-to-heroku-fe79c/</guid>
      <description>Thank you for your help.  【environment】 Surface Laptop2 Windows 1809 Python 3.7.4 (the one running on the command line) Django 2.2.6
[What you want to achieve] I want to publish an app made with Django using heroku
【Situation】 The Django app on Heroku doesn&amp;rsquo;t deploy well and the build doesn&amp;rsquo;t succeed.
Procedure (1) https://qiita.com/frosty/items/66f5dff8fc723387108c Https://qiita.com/RyuSA/items/0cbc7d5b0145585861a8 I rewrote settings.py with reference to the two sites Was rewritten as from socket import gethostname # It is possible to get the hostname by doing this ***A import django_heroku import os import dj_database_url</description>
    </item>
    
  </channel>
</rss>