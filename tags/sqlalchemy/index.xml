<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>sqlalchemy on Memo Tut</title>
    <link>https://memotut.com/tags/sqlalchemy/</link>
    <description>Recent content in sqlalchemy on Memo Tut</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 04 Nov 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://memotut.com/tags/sqlalchemy/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[Python] Getting started with Pydantic</title>
      <link>https://memotut.com/getting-started-with-pydantic-d1dcb/</link>
      <pubDate>Mon, 04 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://memotut.com/getting-started-with-pydantic-d1dcb/</guid>
      <description>Hello, are you Kakyo.  This time, I would like to write an article about pydantic.
What is Pydantic Pydantic is a library that uses Python type annotations to provide run-time type hints and to easily provide error settings when validating data.
This library will help you define your database model in SQLAlchemy.
model First of all, in defining it, define as follows.
from datetime import datetime from typing import List from pydantic import BaseModel class Summer(BaseModel): id: int declare the type as name: str # (variable): (type) You can also define a default value using friends: List[int] = [] # &amp;#34;=&amp;#34; created_at: datetime external_data={ &amp;#39;id&amp;#39;: &amp;#39;1&amp;#39;, &amp;#39;name&amp;#39;:&amp;#39;Beast senior&amp;#39;, &amp;#39;created_at&amp;#39;: &amp;#39;2019-11-03 03:34&amp;#39;, &amp;#39;friends&amp;#39;: [114,&amp;#39;514&amp;#39;] } summer = Summer(**external_data) print(summer.</description>
    </item>
    
  </channel>
</rss>