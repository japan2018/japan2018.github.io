<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>pydantic on Memo Tut</title>
    <link>https://memotut.com/tags/pydantic/</link>
    <description>Recent content in pydantic on Memo Tut</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 23 Apr 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://memotut.com/tags/pydantic/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>It is convenient to use pydantic when reading environment variables in Python</title>
      <link>https://memotut.com/it-is-convenient-to-use-pydantic-when-reading-environment-variables-in-python-ee676/</link>
      <pubDate>Thu, 23 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://memotut.com/it-is-convenient-to-use-pydantic-when-reading-environment-variables-in-python-ee676/</guid>
      <description>When implementing an application, dealing with environment variables is a little tricky, right?  When implementing in Python, if you use the library pydantic, you can set the default value, cast to int type, and set the value from .env. You can easily implement processing such as reading. In this article, I will introduce those sample codes.
By the way, pydantic is not a library that only reads environment variables, but a library that can define a class by using type annotations.</description>
    </item>
    
    <item>
      <title>Getting started with Pydantic</title>
      <link>https://memotut.com/getting-started-with-pydantic-d1dcb/</link>
      <pubDate>Mon, 04 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://memotut.com/getting-started-with-pydantic-d1dcb/</guid>
      <description>Hello, are you Kakyo.  This time, I would like to write an article about pydantic.
What is Pydantic Pydantic is a library that uses Python type annotations to provide run-time type hints and to easily provide error settings when validating data.
This library will help you define your database model in SQLAlchemy.
model First of all, in defining it, define as follows.
from datetime import datetime from typing import List from pydantic import BaseModel class Summer(BaseModel): id: int declare the type as name: str # (variable): (type) You can also define a default value using friends: List[int] = [] # &amp;#34;=&amp;#34; created_at: datetime external_data={ &amp;#39;id&amp;#39;: &amp;#39;1&amp;#39;, &amp;#39;name&amp;#39;:&amp;#39;Beast senior&amp;#39;, &amp;#39;created_at&amp;#39;: &amp;#39;2019-11-03 03:34&amp;#39;, &amp;#39;friends&amp;#39;: [114,&amp;#39;514&amp;#39;] } summer = Summer(**external_data) print(summer.</description>
    </item>
    
  </channel>
</rss>