<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title> environment variables on Memo Tut</title>
    <link>https://memotut.com/tags/environment-variables/</link>
    <description>Recent content in  environment variables on Memo Tut</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 23 Apr 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://memotut.com/tags/environment-variables/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>It is convenient to use pydantic when reading environment variables in Python</title>
      <link>https://memotut.com/it-is-convenient-to-use-pydantic-when-reading-environment-variables-in-python-ee676/</link>
      <pubDate>Thu, 23 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://memotut.com/it-is-convenient-to-use-pydantic-when-reading-environment-variables-in-python-ee676/</guid>
      <description>When implementing an application, dealing with environment variables is a little tricky, right?  When implementing in Python, if you use the library pydantic, you can set the default value, cast to int type, and set the value from .env. You can easily implement processing such as reading. In this article, I will introduce those sample codes.
By the way, pydantic is not a library that only reads environment variables, but a library that can define a class by using type annotations.</description>
    </item>
    
  </channel>
</rss>