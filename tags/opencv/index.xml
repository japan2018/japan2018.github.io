<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>OpenCV on Some Title</title>
    <link>https://japan2018.github.io/tags/opencv/</link>
    <description>Recent content in OpenCV on Some Title</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 17 May 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://japan2018.github.io/tags/opencv/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[Python] Recognize characters from images with OpenCV and pyocr</title>
      <link>https://japan2018.github.io/python-recognize-characters-from-images-with-opencv-and-pyocr-f9a70/</link>
      <pubDate>Sun, 17 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://japan2018.github.io/python-recognize-characters-from-images-with-opencv-and-pyocr-f9a70/</guid>
      <description>#Introduction  When I was looking for articles using Selenium, I found an article about automated sushi batting. The method basically looks like the following ・Continue entering all keys after starting the game ・After starting the game, take a screenshot and enter the character string obtained by OCR *Sushi Uchi cannot get the character string directly because the game screen is drawn on the Canvas element.
This time I tried simple image processing using OCR part and OpenCV as pre-processing #Advance preparation</description>
    </item>
    
    <item>
      <title>I tried morphological conversion of the image with Python &#43; OpenCV</title>
      <link>https://japan2018.github.io/i-tried-morphological-conversion-of-the-image-with-python-opencv-f87cc/</link>
      <pubDate>Sat, 09 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://japan2018.github.io/i-tried-morphological-conversion-of-the-image-with-python-opencv-f87cc/</guid>
      <description>## Introduction  With image processing, it is not always possible to prepare beautiful images. Images often contain noise. If there is noise, it may be removed using a method called &amp;ldquo;smoothing&amp;rdquo; or &amp;ldquo;morphological transformation&amp;rdquo;.
This time, we will use Python to perform morphological transformation of the image using OpenCV.
*For details on &amp;ldquo;smoothing&amp;rdquo;, refer to the following. I tried &amp;ldquo;smoothing&amp;rdquo; the image with Python + OpenCV
What is morphological conversion Morphological transformation is mainly the process of &amp;ldquo;shrink&amp;rdquo; and &amp;ldquo;expansion&amp;rdquo; for binary images.</description>
    </item>
    
    <item>
      <title>How to get RGB and HSV histogram with OpenCV</title>
      <link>https://japan2018.github.io/how-to-get-rgb-and-hsv-histogram-with-opencv-ff4a0/</link>
      <pubDate>Mon, 20 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://japan2018.github.io/how-to-get-rgb-and-hsv-histogram-with-opencv-ff4a0/</guid>
      <description>#Introduction  I&amp;rsquo;m working with images, and I wanted to use the RGB and HSV histogram information as features. So I tried to extract the histogram using OpenCV. Leave it as a memo.
#histogram
You can think of a histogram as a graph or plot to know the overall distribution of pixel values in an image. Generally, it is a plot with pixel value on the horizontal axis and frequency of pixel value on the vertical axis.</description>
    </item>
    
    <item>
      <title>Computer Vision : Object Detection - Non Maximum Suppression</title>
      <link>https://japan2018.github.io/computer-vision-object-detection-non-maximum-suppression-fbf3b/</link>
      <pubDate>Mon, 06 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://japan2018.github.io/computer-vision-object-detection-non-maximum-suppression-fbf3b/</guid>
      <description>#Target  Implement Non Maximum Suppression used in object detection.
#Introduction This section introduces Intersection over Union and Non Maximum Suppression used in Computer Vision: Object Detection Part2-Single Shot Multi Detector.
##Non Maximum Suppression (NMS) In object detection, multiple candidate regions that are presumed to exist may be obtained for one recognized object, as shown in the figure below.
The part surrounded by the colored rectangle indicates the candidate area, and the display at the upper left of each candidate area indicates the category and the certainty factor of the object existing in that candidate area.</description>
    </item>
    
    <item>
      <title>Install dlib for Python (Windows)</title>
      <link>https://japan2018.github.io/install-dlib-for-python-windows-fd84f/</link>
      <pubDate>Sun, 05 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://japan2018.github.io/install-dlib-for-python-windows-fd84f/</guid>
      <description>I&#39;m stumbled upon soberly, so I will explain with a lot of images.  There may be unnecessary steps, but I will introduce the method that will definitely be tried after various trials. I would like to gradually edit to reduce waste.
0. Assumption The environment is as follows. ・Windows 10 Home 64 bit
1. Install Python You can download it from the following. https://www.python.org/downloads/windows/
This time, install &amp;ldquo;Python 3.8.1 64bit&amp;rdquo; On the installation screen, check &amp;ldquo;Add Python 3.</description>
    </item>
    
    <item>
      <title>Recognize the board surface of Othello board with OpenCV</title>
      <link>https://japan2018.github.io/recognize-the-board-surface-of-othello-board-with-opencv-fe6b9/</link>
      <pubDate>Mon, 18 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://japan2018.github.io/recognize-the-board-surface-of-othello-board-with-opencv-fe6b9/</guid>
      <description>#Introduction  This year, Othello Advent Calendar was planned and invited, so I decided to write an article. Actually, I wrote another article on Day 1, but I didn&amp;rsquo;t know what I was doing and I suddenly entered the article, so this time It is a little self-introduction.
I&amp;rsquo;m developing an app for iOS called Goki Box. As one of its functions, we have incorporated a function that images the Othello board with a camera and overlays the evaluation value on the board with AR.</description>
    </item>
    
  </channel>
</rss>