<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>IPython on Memo Tut</title>
    <link>https://memotut.com/tags/ipython/</link>
    <description>Recent content in IPython on Memo Tut</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 16 Dec 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://memotut.com/tags/ipython/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Jupyter Notebook essential for software development</title>
      <link>https://memotut.com/jupyter-notebook-essential-for-software-development-25a5d/</link>
      <pubDate>Mon, 16 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://memotut.com/jupyter-notebook-essential-for-software-development-25a5d/</guid>
      <description>Hello. I&#39;m a software engineer who makes various embedded systems, games, web apps, iOS apps, signage control systems, etc.  About two and a half years ago, I thought that I should write in Python as a general-purpose scripting language that is difficult to realize only with a shell, and I was trying to learn Python while suffering. Since I only use it occasionally, I was at a level where I forget how to write if and for loops every time.</description>
    </item>
    
    <item>
      <title>Process %time, %timeit results</title>
      <link>https://memotut.com/process-time-timeit-results-8c8a0/</link>
      <pubDate>Wed, 04 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://memotut.com/process-time-timeit-results-8c8a0/</guid>
      <description>It&#39;s well known that you can measure execution time with `%time` or `%timeit` in Jupyter/IPython, but have you ever wanted to process or visualize this?  You can use standard output as a Python object by using %%capture. Let&amp;rsquo;s actually do it.
%%capture result %timeit 2 ** 100 The argument of %%capture is the object name, see help for other options.
 %capture [--no-stderr] [--no-stdout] [--no-display] [output] run the cell, capturing stdout, stderr, and IPython&#39;s rich display() calls.</description>
    </item>
    
  </channel>
</rss>