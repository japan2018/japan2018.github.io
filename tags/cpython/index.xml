<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CPython on Memo Tut</title>
    <link>https://memotut.com/tags/cpython/</link>
    <description>Recent content in CPython on Memo Tut</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 01 Dec 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://memotut.com/tags/cpython/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Make Awaitable with Python/C API</title>
      <link>https://memotut.com/make-awaitable-with-python-c-api-1f737/</link>
      <pubDate>Sun, 01 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://memotut.com/make-awaitable-with-python-c-api-1f737/</guid>
      <description>Introduction  ========
This year is nearing the end of the year, so I will wastefully use Python C/API. Reversal of purpose and means. This time, we aim to use Awaitable as something like Coroutine obtained by executing the following coroutine function spam.
import asyncio import sys async def spam(): print(&amp;#39;do something&amp;#39;) ret = await asyncio.sleep(1,&amp;#39;RETURN VALUE&amp;#39;) return ret.lower() async def main(): ret = await spam() print(ret) if __name__ ==&amp;#39;__main__&amp;#39;: if sys.</description>
    </item>
    
  </channel>
</rss>