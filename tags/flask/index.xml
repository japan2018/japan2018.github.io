<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title> Flask on Memo Tut</title>
    <link>https://memotut.com/tags/flask/</link>
    <description>Recent content in  Flask on Memo Tut</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 24 May 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://memotut.com/tags/flask/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[Python] Hospitable animal shogi AI was born! A story of making a hospitality entertaining AI.</title>
      <link>https://memotut.com/hospitable-animal-shogi-ai-was-born-a-story-of-making-a-hospitality-entertaining-ai.-5989e/</link>
      <pubDate>Sun, 24 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://memotut.com/hospitable-animal-shogi-ai-was-born-a-story-of-making-a-hospitality-entertaining-ai.-5989e/</guid>
      <description>#Introduction  It&amp;rsquo;s been a long time since AI became stronger than professional shogi players.
On the other hand, Professor Zenji Hanyu** &amp;ldquo;** Things like entertaining shogi are difficult for AI**,&amp;rdquo; he said.
Then, what kind of point is difficult when actually trying to make entertainment AI, What level of &amp;ldquo;entertainment&amp;rdquo; can we do?
This is a development diary record of the difficult challenge of &amp;ldquo;entertainment shogi&amp;rdquo;. It is a story up to the idea of the entertainment AI obtained.</description>
    </item>
    
    <item>
      <title>[Python] If you create a program that automatically starts/ends the verification environment for pull requests, the verification progressed</title>
      <link>https://memotut.com/if-you-create-a-program-that-automatically-starts-ends-the-verification-environment-for-pull-requests-the-verification-progressed-216fc/</link>
      <pubDate>Sun, 29 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://memotut.com/if-you-create-a-program-that-automatically-starts-ends-the-verification-environment-for-pull-requests-the-verification-progressed-216fc/</guid>
      <description># Article summary  I wanted to put the sales involved in the development with GitHub Flow, that is, the development with a simple pull operation, and created such an environment. At that time, I made and released a web application that supplements some missing functions, so I will write various stories about it. (It&amp;rsquo;s not about whether or not you can actually use this web app, but rather that you want to improve your development with a similar flow.</description>
    </item>
    
    <item>
      <title>[Python] Flask introduction ~ Blueprint application note</title>
      <link>https://memotut.com/flask-introduction-~-blueprint-application-note-fb7d1/</link>
      <pubDate>Mon, 02 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://memotut.com/flask-introduction-~-blueprint-application-note-fb7d1/</guid>
      <description>Let&#39;s try the title as easily as possible.  Blueprint allows you to implement the functionality of your application in pieces. Blueprint is officially recommended as a way to organize bloated projects.
Install Flask $ sudo pip3 install flask Directory structure $ cd ~/workspace/sample-flask/ $ls server.py from flask import Flask app = Flask(__name__) @app.route(&amp;#39;/&amp;#39;) def func_1(): return&amp;#39;Hello world&amp;#39; @app.route(&amp;#39;/test&amp;#39;) def func_2(): return&amp;#39;Test&amp;#39; if __name__ ==&amp;#39;__main__&amp;#39;: app.run(host=&amp;#39;0.0.0.0&amp;#39;, port=80, debug=True) Execution command $python3 server.</description>
    </item>
    
    <item>
      <title>[Python] I tried building a service to sell machine-learned data at explosive speed with Docker</title>
      <link>https://memotut.com/i-tried-building-a-service-to-sell-machine-learned-data-at-explosive-speed-with-docker-d690e/</link>
      <pubDate>Mon, 27 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://memotut.com/i-tried-building-a-service-to-sell-machine-learned-data-at-explosive-speed-with-docker-d690e/</guid>
      <description>About 3 years ago [The result of my own development of a machine learning stock price forecast program at WEB shop \| Masamnet](http://masamunet.com/2016/11/09/web%E5%B1%8B%E3%81%AE%E8%87%AA%E5%88%86%E3%81%8C%E6%A9%9F%E6%A2%B0%E5%AD%A6%E7%BF%92%E6%A0%AA%E4%BE%A1%E4%BA%88%E6%83%B3%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%A0%E3%82%92%E9%96%8B%E7%99%BA/) I wrote an article, and I did not do much with machine learning or stocks, but at the beginning of this year&#39;s end of the year, I dared to I tried various things.  So, I got a pretty good result, so I will write the technical background until it started as a service as it is.</description>
    </item>
    
    <item>
      <title>[Python] Simulate temperature measurement with Raspberry Pi &#43; Flask &#43; SQLite &#43; Ajax</title>
      <link>https://memotut.com/simulate-temperature-measurement-with-raspberry-pi-flask-sqlite-ajax-f3530/</link>
      <pubDate>Fri, 10 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://memotut.com/simulate-temperature-measurement-with-raspberry-pi-flask-sqlite-ajax-f3530/</guid>
      <description>#Introduction  It is convenient to be able to debug with software alone when measuring temperature with Raspberry Pi and acquiring sensor status with GPIO. Therefore, we created a debug environment that simulates temperature measurement and acquisition of sensor status with GPIO, and displays it on a website (created with Flask). Save the simulated temperature and sensor state in SQLite and refresh the page via Ajax. The temperature and sensor values are hard to understand, so it looks as if the living room temperature and sensor had changed.</description>
    </item>
    
    <item>
      <title>[Python] Performance comparison of Python web frameworks (Django, Flask, responder, FastAPI, japronto)</title>
      <link>https://memotut.com/performance-comparison-of-python-web-frameworks-django-flask-responder-fastapi-japronto-0ad26/</link>
      <pubDate>Thu, 02 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://memotut.com/performance-comparison-of-python-web-frameworks-django-flask-responder-fastapi-japronto-0ad26/</guid>
      <description>I made a simple API using the following Python Web framework and tried a load test.   Django (2.X) Flask FastAPI responder japronto  As a result, I found the following roughly!
 Performance can be said to be &amp;ldquo;japronto &amp;raquo;&amp;gt; FastAPI&amp;gt; responder &amp;raquo;&amp;gt; Flask ~ Django&amp;rdquo; FastAPI and responder are single workers, and if they request about 100-1000 seconds per second**, they have overwhelming performance in the python world almost the same level as japronto**  (The code used for the verification is here.</description>
    </item>
    
    <item>
      <title>[Python] Python × Flask × PyTorch Easy construction of digit recognition web application</title>
      <link>https://memotut.com/python-flask-pytorch-easy-construction-of-digit-recognition-web-application-43397/</link>
      <pubDate>Fri, 13 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://memotut.com/python-flask-pytorch-easy-construction-of-digit-recognition-web-application-43397/</guid>
      <description>Let&#39;s create an image recognition application using Python, Flask, and PyTorch.  If you combine these three, you can make a demo app easily and explosively.
#Introduction
What is Flask A web framework for Python. Django is a popular Python web framework, but Flask sells lightweight. Compared to Django, there are few functions and extension libraries, but the code is simple due to the restrictions, and you can easily create applications.</description>
    </item>
    
    <item>
      <title>[Python] [Python framework] Super easy REST API implementation with Flask</title>
      <link>https://memotut.com/python-framework-super-easy-rest-api-implementation-with-flask-5e72f/</link>
      <pubDate>Sun, 08 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://memotut.com/python-framework-super-easy-rest-api-implementation-with-flask-5e72f/</guid>
      <description>#Introduction  Hi, this is Lux Advent Calendarof8daysinchargeMasaKu.
Previously posted API news articlemakesmefeelbetterifIstillgetagoodfeeling,andIwanttoattackthisyear&amp;rsquo;sarticlewithAPInews.Itwas.(Fullviewofthelowerheart)
This time, I will introduce a super simple REST API creation method using Flask which is a Python framework.
Because REST API can be created with a simple notation, it is also recommended for those who want to study the front firmly for personal development but want to make the back end quickly.
What is # Flask</description>
    </item>
    
    <item>
      <title>[Python] Hands-on that automatically deploys an OCR app (Python, Flask) using Microsoft&#39;s AI service Cognitive Services to Azure with a git push trigger</title>
      <link>https://memotut.com/hands-on-that-automatically-deploys-an-ocr-app-python-flask-using-microsofts-ai-service-cognitive-services-to-azure-with-a-git-push-trigger-e6909/</link>
      <pubDate>Fri, 06 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://memotut.com/hands-on-that-automatically-deploys-an-ocr-app-python-flask-using-microsofts-ai-service-cognitive-services-to-azure-with-a-git-push-trigger-e6909/</guid>
      <description>The web application we will create this time is an OCR (character recognition) application that will upload an image containing characters and will recognize it and display it as a string.  The app uses Python 3, Flask, Cognitive Services from Microsoft&amp;rsquo;s AI service, and more. Deployment to the cloud (Microsoft Azure) is automatic deployment of git push trigger.
Thank you! This OCR app is made by Microsoft engineer Christopher Harrison.</description>
    </item>
    
    <item>
      <title>[Python] Python newbie tried Hello World in 30 seconds using micro framework Flask</title>
      <link>https://memotut.com/python-newbie-tried-hello-world-in-30-seconds-using-micro-framework-flask-44f93/</link>
      <pubDate>Mon, 02 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://memotut.com/python-newbie-tried-hello-world-in-30-seconds-using-micro-framework-flask-44f93/</guid>
      <description>## What is Flask   Python micro web framework Minimal functionality provided as standard Django for full stack framework Reference -Comparison of 4 types of Python Web framework  about me Python history 3 days
Reason for doing looks fun
What I did ** ① Flask installation **
pip install Flask ** ② Make hello.py in your favorite folder ** ③ Paste the following
from flask import Flask app = Flask(__name__) @app.</description>
    </item>
    
    <item>
      <title>[Python] Build an application with Clean Architecture while using DI&#43;Mock in Python</title>
      <link>https://memotut.com/build-an-application-with-clean-architecture-while-using-di-mock-in-python-93c1c/</link>
      <pubDate>Mon, 11 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://memotut.com/build-an-application-with-clean-architecture-while-using-di-mock-in-python-93c1c/</guid>
      <description>When implementing a web application using Python in business, we decided to introduce the Clean Architecture to develop while separating the concerns for each layer.  We&amp;rsquo;ve put together a set of practices for developing testable applications, using progressive typing and Dependency Injection to share knowledge with team members.
Clean Architecture This time, since the purpose is a sample using Python, the explanation of Clean Architecture will be simple.
(Quoted from The Clean Architecture)</description>
    </item>
    
    <item>
      <title>[Python] I made a Web application that graphs the life log recorded by Google Home like a Gantt chart.</title>
      <link>https://memotut.com/i-made-a-web-application-that-graphs-the-life-log-recorded-by-google-home-like-a-gantt-chart.-1941f/</link>
      <pubDate>Thu, 31 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>https://memotut.com/i-made-a-web-application-that-graphs-the-life-log-recorded-by-google-home-like-a-gantt-chart.-1941f/</guid>
      <description>## I made a web application that graphs life logs like a Gantt chart  _ People people people people people people people people _
 LIFE LOG GRAPH GENERATOR &amp;lt; ￣ Y^Y^Y^Y^Y^Y^Y^Y^Y^Y^Y^Y￣
 A brief description   From the life log data in which the `date` and `content` are described. ． ． (Folded.) October 15, 2019 at 11:24PM Go to bed October 16, 2019 at 06:03AM Wake up October 16, 2019 at 07:08AM Outing October 16, 2019 at 08:17AM Start development October 16, 2019 at 10:49AM Development finished October 16, 2019 at 12:30PM Return home October 16, 2019 at 12:59PM Start reading October 16, 2019 at 04:32PM Finish reading October 16, 2019 at 10:31PM Go to bed October 17, 2019 at 06:46AM Wake up October 17, 2019 at 07:29AM Going out October 17, 2019 at 08:27AM Start development October 17, 2019 at 12:48PM Development ended October 17, 2019 at 01:48PM Return home October 17, 2019 at 02:35PM TV started October 17, 2019 at 04:54PM TV ends  A web application that creates such an interactive graph.</description>
    </item>
    
    <item>
      <title>[Python] Twitter posting client made with Flask with simple login function</title>
      <link>https://memotut.com/twitter-posting-client-made-with-flask-with-simple-login-function-ff1d1/</link>
      <pubDate>Thu, 18 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://memotut.com/twitter-posting-client-made-with-flask-with-simple-login-function-ff1d1/</guid>
      <description>Learning #Flask  Flask because I touched both bottle and Django. We will use the Twitter API again as usual.
$python3 -m venv flaskworks $ ls flaskworks/ $ .flaskworks/bin/activate (flaskworks)$ pip install flask (flaskworks)$ pip install requests requests_oauthlib It&amp;rsquo;s very easy to create a directory like a bottle.
(flaskworks)$ cd flaskworks (flaskworks)$ mkdir static (flaskworks)$ mkdir templates Make a template Two are created because the template inheritance is used.
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;ja&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34;&amp;gt; &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;/static/css/style.</description>
    </item>
    
    <item>
      <title>[Python] Flask &#43; Gunicorn &#43; Nginx &#43; Supervisor until it works</title>
      <link>https://memotut.com/flask-gunicorn-nginx-supervisor-until-it-works-fb28e/</link>
      <pubDate>Sun, 27 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://memotut.com/flask-gunicorn-nginx-supervisor-until-it-works-fb28e/</guid>
      <description># Flask + Gunicorn + Nginx + Supervisor Until it works properly   Reference: Run the flask application with nginx/gunicorn/supervisor | http://blog.shun-ichiro.com/howto/nginx-gunicorn-supervisor-flask/
 Information  www directory: /var/www Flask app directory: /var/www/apps/ Directory containing scripts used this time: /var/www/apps/sampleapp/  Flask Base script: /var/www/apps/sampleapp/sample.py
#!/usr/bin/env python #coding: utf-8 from flask import Flask app = Flask(&amp;#34;sample&amp;#34;) @app.route(&amp;#34;/sample&amp;#34;) # Top directory / to use separately def index(): return &amp;#34;&amp;lt;h1&amp;gt;Hello World&amp;lt;/h1&amp;gt;&amp;#34; if __name__ == &amp;#34;__main__&amp;#34;: app.</description>
    </item>
    
  </channel>
</rss>