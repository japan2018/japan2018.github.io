<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kafka on Memo Tut</title>
    <link>https://memotut.com/tags/kafka/</link>
    <description>Recent content in Kafka on Memo Tut</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 22 Dec 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://memotut.com/tags/kafka/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Copy consumer offset to another with kafka-python</title>
      <link>https://memotut.com/copy-consumer-offset-to-another-with-kafka-python-bfc1b/</link>
      <pubDate>Sun, 22 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://memotut.com/copy-consumer-offset-to-another-with-kafka-python-bfc1b/</guid>
      <description>When implementing Kafka consumer, we often use languages such as Java and Scala, but I would like to use Python, which can be implemented lightly if it is not that complicated.  This time I&amp;rsquo;d like to write a maintenance process that moves the offset of one consumer to another consumer using kafka-python of Apache Kafka library for Python.
Consumer offset acquisition This time we will use KafkaAdminClient. You can also get it from KafkaConsumer, but it is complicated to subscribe or poll the consumer, so it is recommended to use this client.</description>
    </item>
    
    <item>
      <title>I touched Apache Kafka</title>
      <link>https://memotut.com/i-touched-apache-kafka-2a8ef/</link>
      <pubDate>Sat, 14 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://memotut.com/i-touched-apache-kafka-2a8ef/</guid>
      <description>This is the 15th day of MDC Advent Calendar 2019.  What is Kafka OSS distributed messaging system (messaging queue) created by LinkedIn. High throughput, high scalability. Written in Java (Scala).
It consists of three components: Producer, Broker, and Consumer. It relays the data streamed from Producer to Consumer. Data is also persisted due to obstacles. A delivery guarantee is also realized. · Producer: Deliver message · Broker: Passing messages from Producer to Consumer · Consumer: Receive message</description>
    </item>
    
  </channel>
</rss>