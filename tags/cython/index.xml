<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cython on Memo Tut</title>
    <link>https://memotut.com/tags/cython/</link>
    <description>Recent content in Cython on Memo Tut</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 23 Dec 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://memotut.com/tags/cython/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[Python] Python program is slow! I want to speed up! At that time...</title>
      <link>https://memotut.com/python-program-is-slow-i-want-to-speed-up-at-that-time...-cc36a/</link>
      <pubDate>Mon, 23 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://memotut.com/python-program-is-slow-i-want-to-speed-up-at-that-time...-cc36a/</guid>
      <description># Python program is slow! I want to speed up! At that time...  When implemented in Python, the processing time may be too long to meet the requirements. In that case, there are four types of measures shown in this article.
If you do something to speed it up, you lose something else. Typical examples of trade-offs are freedom of expression, readability, dependency, memory usage, and CPU usage. Please follow the usage and capacity and use correctly.</description>
    </item>
    
    <item>
      <title>[Python] Introductory Cython -2-</title>
      <link>https://memotut.com/introductory-cython-2-fed0a/</link>
      <pubDate>Thu, 12 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>https://memotut.com/introductory-cython-2-fed0a/</guid>
      <description>This article is a continuation of [&amp;quot;Introduction to Cython&amp;quot;](http://qiita.com/pashango2/items/45cb85390193d97523ca).  Let&amp;rsquo;s get started with Cython again this time so as not to go too deep. It should be noted that this article is intended to have you enjoy the delicious portion of Cython without going deep.
Cython Notation Early Tour Cython&amp;rsquo;s notation isn&amp;rsquo;t that hard, and there&amp;rsquo;s good sample code in the Cython tutorial, so let&amp;rsquo;s borrow it.
def myfunction(x, y=2): a = x-y return a + x * y def _helper(a): return a + 1 class A: def __init__(self, b=0): self.</description>
    </item>
    
    <item>
      <title>[Python] Talk to improve the bottleneck of machine learning algorithm with Cython</title>
      <link>https://memotut.com/talk-to-improve-the-bottleneck-of-machine-learning-algorithm-with-cython-fe83f/</link>
      <pubDate>Sun, 26 Jun 2016 00:00:00 +0000</pubDate>
      
      <guid>https://memotut.com/talk-to-improve-the-bottleneck-of-machine-learning-algorithm-with-cython-fe83f/</guid>
      <description>#About this article   Talk about how to make Python faster Find CPU bound processing bottlenecks by profiling Improve the bottleneck you find with Cython  #Introduction We recently implemented a recommendation algorithm called Bayesian Personalized Ranking (BPR). I tried to write the code with reference to the formula of this paper, but when I tried to execute it, it was a bit too slow and I could not use it, so I improved the processing speed.</description>
    </item>
    
    <item>
      <title>[Python] Perform half-width/full-width conversion at high speed with Python</title>
      <link>https://memotut.com/perform-half-width-full-width-conversion-at-high-speed-with-python-fea6c/</link>
      <pubDate>Thu, 27 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>https://memotut.com/perform-half-width-full-width-conversion-at-high-speed-with-python-fea6c/</guid>
      <description>Introducing the library &amp;quot;[mojimoji](https://github.com/studio-ousia/mojimoji)&amp;quot; that can convert Japanese character strings into half-width and full-width at high speed with Python.  mojimoji can perform full-width/half-width conversion in Python at high speed. Using the method introduced in here, conversion processing is internally performed using unordered_map of Cython and C++, which is considerably faster than the conventional implementation. Works.
Install % pip install mojimoji Overview mojimoji has two methods, han_to_zen and zen_to_han. You can also take the keyword arguments kana, digit, and ascii respectively to disable the conversion of katakana, numbers, and alphabets.</description>
    </item>
    
  </channel>
</rss>