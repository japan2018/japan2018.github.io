<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title> image processing on Memo Tut</title>
    <link>https://memotut.com/tags/image-processing/</link>
    <description>Recent content in  image processing on Memo Tut</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 24 May 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://memotut.com/tags/image-processing/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>AnimeGAN that converts live-action film into anime style (Windows10, Python3.6)</title>
      <link>https://memotut.com/animegan-that-converts-live-action-film-into-anime-style-windows10-python3.6-44804/</link>
      <pubDate>Sun, 24 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://memotut.com/animegan-that-converts-live-action-film-into-anime-style-windows10-python3.6-44804/</guid>
      <description>#Introduction  I tried AnimeGAN, which transforms live-action film into anime style.
System environment  Windows10 (RTX2080 Max-Q, i7-8750H, RAM16GB) Anaconda 2020.02 Python 3.6 CUDA 9.0  Introduction Clone AnimeGAN.
Create an environment for animegan.
$ conda create -n animegan python=3.6 $ conda activate animegan $ pip install tensorflow-gpu==1.8.0 $ pip install tqdm $ pip install scipy $ pip install opencv-python $ cd AnimeGAN-master Put dataset on AnimeGAN-master.
Copy and paste the contents of Haoyao-style to checkpoint\AnimeGAN_Hayao_lsgan_300_300_1_3_10</description>
    </item>
    
    <item>
      <title>Draw gears</title>
      <link>https://memotut.com/draw-gears-62931/</link>
      <pubDate>Tue, 12 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://memotut.com/draw-gears-62931/</guid>
      <description>Gears are cool, aren&#39;t they? I feel that I can look at any number of movements of a clock that works in conjunction with various large and small gears.  Article purpose I will draw a gear by programming. There are various types of gears, but we will try focusing on ** spur gears **. This is the type of gear that the general public first think of when they hear a gear, as in the image above.</description>
    </item>
    
    <item>
      <title>I tried to make a program (a hint) to solve the mistake search of Saizeriya</title>
      <link>https://memotut.com/i-tried-to-make-a-program-a-hint-to-solve-the-mistake-search-of-saizeriya-0bb19/</link>
      <pubDate>Sun, 29 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://memotut.com/i-tried-to-make-a-program-a-hint-to-solve-the-mistake-search-of-saizeriya-0bb19/</guid>
      <description>Hello. This is my first post.  The other day, when I went to Saizeriya, the waiting time was about 20 minutes, and I was looking for a mistake in Saizeriya, and I couldn&amp;rsquo;t find it&amp;hellip; So I thought I could solve it with image processing, so I tried it. It was also a good study of OpenCV.
#Thing you want to do Image data officially published by Saizeriya using the OpenCV library (https://www.</description>
    </item>
    
    <item>
      <title>Automate background removal of latest person images in directory with Python and API</title>
      <link>https://memotut.com/automate-background-removal-of-latest-person-images-in-directory-with-python-and-api-0ff9d/</link>
      <pubDate>Tue, 17 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://memotut.com/automate-background-removal-of-latest-person-images-in-directory-with-python-and-api-0ff9d/</guid>
      <description># Thing you want to do   Background removal of portrait image Finely specify the input destination of the image to be background-removed and the output destination of the background-removed image. Browse the latest image in the folder Automation of them  Occasionally you may want to perform face recognition from an image using OpenCV or facenet and do some processing. Of course, these tools will recognize your face, but I have found that there are times when the accuracy of face recognition drops dramatically due to unnecessary things such as the background in the image.</description>
    </item>
    
    <item>
      <title>The image is binarized. Furthermore, the shortest distance between two regions can be calculated (ver1.0).</title>
      <link>https://memotut.com/the-image-is-binarized.-furthermore-the-shortest-distance-between-two-regions-can-be-calculated-ver1.0.-05a65/</link>
      <pubDate>Sun, 15 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://memotut.com/the-image-is-binarized.-furthermore-the-shortest-distance-between-two-regions-can-be-calculated-ver1.0.-05a65/</guid>
      <description>#Introduction  *A revised version has been created. https://qiita.com/Fumio-eisan/items/10c54af7a925b403f59f
I am working in the manufacturing industry, but I feel the flow of actively introducing IoT and AI technologies. I do not belong to the system department that mainly handles these technologies. However, I want to feel the flow myself! I think. There is a Raspberry Pi as a tool that is relatively easy to handle, so I am tentatively planning what can be done with this.</description>
    </item>
    
    <item>
      <title>Normalize image brightness</title>
      <link>https://memotut.com/normalize-image-brightness-9c9fc/</link>
      <pubDate>Fri, 06 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://memotut.com/normalize-image-brightness-9c9fc/</guid>
      <description>#Execution environment  Ubuntu 18.04 Python 3.6.9 OpenCV 3.3.0 #Overview When processing a large number of images, there are a mixture of bright and dark photos, It also affects the processing result, so I want to make the brightness uniform!
From that thought, Since I had the opportunity to adjust the brightness of the image in the preprocessing of learning, I will summarize the method. The purpose is to normalize the input color image to a uniform brightness.</description>
    </item>
    
    <item>
      <title>Using Python&#43;OpenCV, measure the object position (real coordinate system) on the desk from the camera image</title>
      <link>https://memotut.com/using-python-opencv-measure-the-object-position-real-coordinate-system-on-the-desk-from-the-camera-image-c6e46/</link>
      <pubDate>Sat, 01 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://memotut.com/using-python-opencv-measure-the-object-position-real-coordinate-system-on-the-desk-from-the-camera-image-c6e46/</guid>
      <description>#Introduction  The goal is to determine the position of an arbitrary object placed on a plane (desk) with a reference marker in the real coordinate system as follows. The implementation is done in Python and uses the OpenCV module ArUco.  OpenCV/ArUco library object position measurement @ inoblog.  Execution environment It uses GoogleColab. (Python 3.6.9). The module version used is:
%pip list | grep -e opencv -e numpy numpy 1.</description>
    </item>
    
    <item>
      <title>I tried to automate the face hiding work of wear coordination images</title>
      <link>https://memotut.com/i-tried-to-automate-the-face-hiding-work-of-wear-coordination-images-dab3b/</link>
      <pubDate>Wed, 29 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://memotut.com/i-tried-to-automate-the-face-hiding-work-of-wear-coordination-images-dab3b/</guid>
      <description>Do you all know Wear?  WEAR is a fashion coordination site and one of our services. In short, it is an SNS where you can share your fashion coordination.
I don&amp;rsquo;t know why, but it seems to be popular to post with the face hidden by an icon. Is it because people without a face can see the coordination objectively?
However, the face hiding work is surprisingly troublesome, and I wish I could automate this&amp;hellip; so I implemented a program for automatic icon placement.</description>
    </item>
    
    <item>
      <title>I made a module in C language that applies a filter to the image read in Python</title>
      <link>https://memotut.com/i-made-a-module-in-c-language-that-applies-a-filter-to-the-image-read-in-python-a2368/</link>
      <pubDate>Fri, 24 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://memotut.com/i-made-a-module-in-c-language-that-applies-a-filter-to-the-image-read-in-python-a2368/</guid>
      <description>At work I had to do image processing using Python. It&#39;s okay if it can be done by OpenCV etc., but the filter of the original algorithm will not be practical unless it is C/C++. So I made a module for Python in C language.  If you want to try it out quickly, please use my repository. https://github.com/soramimi/pymodule-image-filter
How to make your own module for Python Install dependent modules The first trial is helloworld, so it is not necessary, but numpy, pillow, and matplotlib are used in the later image processing section, so these modules must be installed.</description>
    </item>
    
    <item>
      <title>Image registration: From SIFT to deep learning</title>
      <link>https://memotut.com/image-registration-from-sift-to-deep-learning-9598c/</link>
      <pubDate>Wed, 22 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://memotut.com/image-registration-from-sift-to-deep-learning-9598c/</guid>
      <description>## Overview  There are few Japanese articles about image registration (as of January 22, 2020), so I thought it was very easy to understand Image Registration: From SIFT to Deep Learning was translated or summarized. Some parts have been omitted or added, so please read the original article if you want to get the original text.
Source code
What is image registration? Image registration is the process of correcting the misalignment between two images.</description>
    </item>
    
    <item>
      <title>Judgment of backlight image using OpenCV</title>
      <link>https://memotut.com/judgment-of-backlight-image-using-opencv-2aa08/</link>
      <pubDate>Fri, 27 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://memotut.com/judgment-of-backlight-image-using-opencv-2aa08/</guid>
      <description>## Introduction  Hello, My name is Kano. At ABEJA, I am in charge of customer support for Insight for Retail, a retail service.
Recently, I am living a vegan life under the influence of a documentary called Game Changer that I watched on Netflix. However, I sometimes eat Jiro, family, or cottery ramen, so I can&amp;rsquo;t lose weight.
I&amp;rsquo;m not an engineer, but I will do my best to write it.</description>
    </item>
    
    <item>
      <title>CNN (U-net, DnCNN, WIN5-RB) that restores images full of noise and graffiti, and images blurred with zoom</title>
      <link>https://memotut.com/cnn-u-net-dncnn-win5-rb-that-restores-images-full-of-noise-and-graffiti-and-images-blurred-with-zoom-2ad3d/</link>
      <pubDate>Sat, 21 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://memotut.com/cnn-u-net-dncnn-win5-rb-that-restores-images-full-of-noise-and-graffiti-and-images-blurred-with-zoom-2ad3d/</guid>
      <description>#Introduction  Deep learning is a method recently used to clean dirty images, remove graffiti from images, and restore poorly-zoomed images.
The principle is simple, just input a noisy image to the converter and output a beautiful image.
Such converters are often made up of Convolutional Neural Networks (CNN).
In this article, I will try to implement such CNN with pytorch and see the results.
There are various CNN models like this, but this time I will try with three CNN models and compare the results.</description>
    </item>
    
    <item>
      <title>I tried to make a program that solves the mistake search in seconds</title>
      <link>https://memotut.com/i-tried-to-make-a-program-that-solves-the-mistake-search-in-seconds-3be8b/</link>
      <pubDate>Sat, 14 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://memotut.com/i-tried-to-make-a-program-that-solves-the-mistake-search-in-seconds-3be8b/</guid>
      <description>[Fujitsu Systems Web Technology Advent Calendar 2019](https://qiita.com/advent-calendar/2019/fsweb) This is the 16th day post.  All content in the article is the personal opinion, and the content of the writing is the author&amp;rsquo;s own responsibility. It does not matter which organization you belong to.
#Introduction This time on the 16th day, I am familiar as I have never cleared the search for mistakes of Saizeria
A program that can display the difference between two images and display the difference easily and easily</description>
    </item>
    
    <item>
      <title>I tried using OpenCV GrabCut</title>
      <link>https://memotut.com/i-tried-using-opencv-grabcut-657c3/</link>
      <pubDate>Mon, 09 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://memotut.com/i-tried-using-opencv-grabcut-657c3/</guid>
      <description>It is the 9th day of [MYJlab Advent Calendar](https://qiita.com/advent-calendar/2019/myjlab).  What is this It&amp;rsquo;s the nth decoction, but this is an article using GrabCut of OpenCV to extract the foreground region of an image.
background My only hobby other than programming is guitar, but I&amp;rsquo;m thinking of creating a service that makes it easy to search the guitar from the outside. In the process, it seems that I will need an image of the guitar alone, so I was looking for a way to remove the background.</description>
    </item>
    
    <item>
      <title>Convert image data to JSON with Python and send/receive it over the network</title>
      <link>https://memotut.com/convert-image-data-to-json-with-python-and-send-receive-it-over-the-network-8da21/</link>
      <pubDate>Wed, 04 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://memotut.com/convert-image-data-to-json-with-python-and-send-receive-it-over-the-network-8da21/</guid>
      <description>#Introduction  Because I wrote a code several times to send the image taken with the Web camera to another server running the face detection model etc. via HTTP communication, make a note of it. In the sample code, the sending side sends images taken from the webcam to the server at regular intervals, the receiving side detects faces and draws a box, and then saves the image file locally.</description>
    </item>
    
    <item>
      <title>I tried extracting characters from subtitles (OpenCV: tesseract-ocr)</title>
      <link>https://memotut.com/i-tried-extracting-characters-from-subtitles-opencv-tesseract-ocr-112c6/</link>
      <pubDate>Sun, 24 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://memotut.com/i-tried-extracting-characters-from-subtitles-opencv-tesseract-ocr-112c6/</guid>
      <description>#Introduction  Here, I will try extracting characters from the subtitles that are displayed under the political broadcast. Since there is no background, it seems to be quite binary.
Although it is possible to get the character and the position with considerable accuracy by extracting the character with the google cloud vision API, I will try to get the character by other methods here.
tesseract-ocr / pyocr First, let&amp;rsquo;s recognize characters using tesseract and pyocr.</description>
    </item>
    
    <item>
      <title>Hashing algorithm for determining the same image</title>
      <link>https://memotut.com/hashing-algorithm-for-determining-the-same-image-b9354/</link>
      <pubDate>Mon, 18 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://memotut.com/hashing-algorithm-for-determining-the-same-image-b9354/</guid>
      <description>#Introduction  When creating a machine learning dataset based on images collected from the internet, it is necessary to delete duplicate images. It is still good if there are duplicate images in the training data, but if there are duplicate images between the training data and the test data, so-called leakage will occur.
The simplest way to detect duplicate images is to use the hash value of a file such as MD5.</description>
    </item>
    
    <item>
      <title>I tried to recognize the face from the video (OpenCV: python version)</title>
      <link>https://memotut.com/i-tried-to-recognize-the-face-from-the-video-opencv-python-version-80072/</link>
      <pubDate>Sat, 16 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://memotut.com/i-tried-to-recognize-the-face-from-the-video-opencv-python-version-80072/</guid>
      <description># Trigger  How to save a part of a long video using OpenCV How to take captured image from video (OpenCV) And from the candidate video, I used OpenCV to prepare the environment that seems to be necessary for image processing. From here, I will try to process using the function/library. The first is face recognition.
#Preparation Since it is developed on Mac, install it from Homebrew.
brew install opencv Therefore, under /usr/local/Cellar/opencv/4.</description>
    </item>
    
  </channel>
</rss>