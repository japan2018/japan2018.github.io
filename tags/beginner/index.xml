<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title> beginner on Some Title</title>
    <link>https://japan2018.github.io/tags/beginner/</link>
    <description>Recent content in  beginner on Some Title</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 30 May 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://japan2018.github.io/tags/beginner/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>CUM_plot often seen at the manufacturing site did not fall on the net, so I made it with python</title>
      <link>https://japan2018.github.io/cum_plot-often-seen-at-the-manufacturing-site-did-not-fall-on-the-net-so-i-made-it-with-python-fa323/</link>
      <pubDate>Sat, 30 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://japan2018.github.io/cum_plot-often-seen-at-the-manufacturing-site-did-not-fall-on-the-net-so-i-made-it-with-python-fa323/</guid>
      <description>0. In the beginning  ============ CUM_plot is often used when performing failure analysis at the production site. If it is a normal distribution, it becomes a straight line, and it is easy to understand whether it is an outlier or a mixture of multiple normal distributions. When I suddenly want to create it with python, the CUM in Figure 1 comes out, but the CUM in Figure 2 does not come out.</description>
    </item>
    
    <item>
      <title>[Python3] Understand the basics of file operations</title>
      <link>https://japan2018.github.io/python3-understand-the-basics-of-file-operations-ff5f2/</link>
      <pubDate>Sun, 24 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://japan2018.github.io/python3-understand-the-basics-of-file-operations-ff5f2/</guid>
      <description>## Introduction  I will summarize the basic knowledge to operate files with Python.
Target: For those who have started learning Python Operating environment: Python3.8.3 (OS is MacOS)
Read and write files Open file open method  Specify the file to open and how to open (read/write). File object is returned. After manipulating the file, it is necessary to execute the close method (to release it from memory).  f = open(&amp;#34;filename&amp;#34;, &amp;#34;mode&amp;#34;)  &amp;ldquo;mode&amp;rdquo; type  |mode | Description | |:&amp;mdash;&amp;mdash;&amp;ndash;|:&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash; &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;| |r | Read mode.</description>
    </item>
    
    <item>
      <title>Django URL settings</title>
      <link>https://japan2018.github.io/django-url-settings-fb9c3/</link>
      <pubDate>Wed, 29 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://japan2018.github.io/django-url-settings-fb9c3/</guid>
      <description>#Introduction  Here, we will explain the settings related to the URL of django.
Project urls.py settings First, edit urls.py under the project directory as follows.
from django.contrib import admin from django.urls import path, include urlpatterns = [ path(&#39;admin/&#39;, admin.site.urls), path(&#39;&#39;, include(&#39;application name.urls&#39;)), ] The place where it becomes admin/ shows the URL to the management screen. For other pages, we use include in the sense that it is described in urls.</description>
    </item>
    
    <item>
      <title>I tried to automatically send the new coronavirus literature to LINE with Python</title>
      <link>https://japan2018.github.io/i-tried-to-automatically-send-the-new-coronavirus-literature-to-line-with-python-fcfe5/</link>
      <pubDate>Thu, 23 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://japan2018.github.io/i-tried-to-automatically-send-the-new-coronavirus-literature-to-line-with-python-fcfe5/</guid>
      <description># Overview  In this article, we will deal with the method of extracting documents related to the new coronavirus newly registered on the previous day from the medical literature database and automatically transmitting them to LINE. The main content is to extract documents that match a certain keyword from a database called PubMed.
When there is a new paper, you will be notified like this. Without it it looks like this.</description>
    </item>
    
    <item>
      <title>You will become an engineer in 100 days-Day 28-Python-Python language basics 4</title>
      <link>https://japan2018.github.io/you-will-become-an-engineer-in-100-days-day-28-python-python-language-basics-4-f9324/</link>
      <pubDate>Fri, 17 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://japan2018.github.io/you-will-become-an-engineer-in-100-days-day-28-python-python-language-basics-4-f9324/</guid>
      <description>Today is the continuation of the basics of Python.  Last time here
You will become an engineer in 100 days-Day 27-Python-Python Exercise 1
list 
Special programming forms can be handled in programming languages. That is the data structure such as dictionary or list.
Use [ ] square brackets to create list type data. Enter the data in the form of the data you want to store inside the square brackets.</description>
    </item>
    
    <item>
      <title>python selenium chromedriver beautifulsoup</title>
      <link>https://japan2018.github.io/python-selenium-chromedriver-beautifulsoup-f8946/</link>
      <pubDate>Wed, 25 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://japan2018.github.io/python-selenium-chromedriver-beautifulsoup-f8946/</guid>
      <description>#### Sample code 1 (simple display only)  import time from selenium import webdriver import chromedriver_binary driver = webdriver.Chrome() driver.get(&amp;#39;https://xxx&amp;#39;) time.sleep(2) # 2 second wait driver.close() driver.quit() Sample code 2 (headless mode: Do not display &amp;amp; parse with beautiful soup) from bs4 import BeautifulSoup import time from selenium import webdriver import chromedriver_binary from selenium.webdriver.chrome.options import Options option = Options() option.add_argument(&amp;#39;--headless&amp;#39;) driver = webdriver.Chrome(options=option) driver.get(&amp;#39;https://xxx&amp;#39;) time.sleep(2) # 2 second wait # If you want to parse soup = BeautifulSoup(driver.</description>
    </item>
    
    <item>
      <title>Flask introduction ~ Blueprint application note</title>
      <link>https://japan2018.github.io/flask-introduction-~-blueprint-application-note-fb7d1/</link>
      <pubDate>Mon, 02 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://japan2018.github.io/flask-introduction-~-blueprint-application-note-fb7d1/</guid>
      <description>Let&#39;s try the title as easily as possible.  Blueprint allows you to implement the functionality of your application in pieces. Blueprint is officially recommended as a way to organize bloated projects.
Install Flask $ sudo pip3 install flask Directory structure $ cd ~/workspace/sample-flask/ $ls server.py from flask import Flask app = Flask(__name__) @app.route(&amp;#39;/&amp;#39;) def func_1(): return&amp;#39;Hello world&amp;#39; @app.route(&amp;#39;/test&amp;#39;) def func_2(): return&amp;#39;Test&amp;#39; if __name__ ==&amp;#39;__main__&amp;#39;: app.run(host=&amp;#39;0.0.0.0&amp;#39;, port=80, debug=True) Execution command $python3 server.</description>
    </item>
    
    <item>
      <title>[Introduction to Docker] I tried to summarize various findings of Docker obtained by studying (Windows/Python)</title>
      <link>https://japan2018.github.io/introduction-to-docker-i-tried-to-summarize-various-findings-of-docker-obtained-by-studying-windows-python-f7eea/</link>
      <pubDate>Mon, 27 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://japan2018.github.io/introduction-to-docker-i-tried-to-summarize-various-findings-of-docker-obtained-by-studying-windows-python-f7eea/</guid>
      <description>There was a person in charge of specialized infrastructure related things in the company, and he was kind to the environment, but it would be bad if I had to study Docker around myself as soon as possible. I&#39;ve finally been introduced to Docker recently, so I&#39;ll try to put together and try what I have learned as a memorandum.  Since I have been working on unfamiliar work such as infrastructure around my career, please forgive me for things that are rough (shallow) in terms of knowledge.</description>
    </item>
    
    <item>
      <title>[Python] The story that seemed to be a trap for rounding off</title>
      <link>https://japan2018.github.io/python-the-story-that-seemed-to-be-a-trap-for-rounding-off-ffd7b/</link>
      <pubDate>Sat, 25 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://japan2018.github.io/python-the-story-that-seemed-to-be-a-trap-for-rounding-off-ffd7b/</guid>
      <description>#Introduction  When I was implementing a trial calculation using Python in my work, it was a story that was almost caught in a trap.
#I just wanted to round&amp;hellip;
&amp;ldquo;Oh, I&amp;rsquo;ll tell you what happened right now!&amp;rdquo;
** &amp;ldquo;I thought I was rounding &amp;ldquo;2.5&amp;rdquo; to &amp;ldquo;3&amp;rdquo;, but before I knew it, it was &amp;ldquo;2&amp;quot;&amp;quot; **
&amp;ldquo;I don&amp;rsquo;t know what you&amp;rsquo;re saying, but I didn&amp;rsquo;t know what you were doing&amp;hellip;&amp;rdquo;</description>
    </item>
    
    <item>
      <title>Day 66 [Introduction to Kaggle] The easiest Titanic forecast</title>
      <link>https://japan2018.github.io/day-66-introduction-to-kaggle-the-easiest-titanic-forecast-fbc03/</link>
      <pubDate>Sun, 19 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://japan2018.github.io/day-66-introduction-to-kaggle-the-easiest-titanic-forecast-fbc03/</guid>
      <description>I tried to challenge &amp;quot;[Titanic: Machine Learning from Disaster](https://www.kaggle.com/c/titanic/notebooks)&amp;quot; of #Kaggle.  Kaggle is like a fighting party where you compete for machine learning. When I entered, there was content for beginners, so I will watch the guidance video at once.

Very fast English! ! ! The contents were an outline of the Titanic accident, explanation of the dataset, tutorial, how to use Kaggle, etc.
I can&amp;rsquo;t hear it because it&amp;rsquo;s too fast to speak, so [Japanese] Titanic sinking accident (https://ja.</description>
    </item>
    
    <item>
      <title>Approach explanation for beginners who are in the top 1.5% (0.83732) in Kaggle Titanic_2</title>
      <link>https://japan2018.github.io/approach-explanation-for-beginners-who-are-in-the-top-1.5-0.83732-in-kaggle-titanic_2-fb6aa/</link>
      <pubDate>Fri, 10 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://japan2018.github.io/approach-explanation-for-beginners-who-are-in-the-top-1.5-0.83732-in-kaggle-titanic_2-fb6aa/</guid>
      <description>[Last time](https://qiita.com/shiroino11111/items/bc3889fa38ff32d46c13),followedby[KaggleTitanic](https://www.kaggle.com/c/titanic/submissions)totop1.5%(0.83732) I will explain the approach of.  The code used is titanic(0.83732)_2 from Github. This time, we will extend the submission score to 0.81339 and prepare for the next time it will be 0.83732. Also, before forecasting, we will visualize the data used in Last time and analyze the data.
###1. Import the required library and read the CSV.
import pandas as pd import numpy as np import matplotlib.</description>
    </item>
    
    <item>
      <title>Install dlib for Python (Windows)</title>
      <link>https://japan2018.github.io/install-dlib-for-python-windows-fd84f/</link>
      <pubDate>Sun, 05 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://japan2018.github.io/install-dlib-for-python-windows-fd84f/</guid>
      <description>I&#39;m stumbled upon soberly, so I will explain with a lot of images.  There may be unnecessary steps, but I will introduce the method that will definitely be tried after various trials. I would like to gradually edit to reduce waste.
0. Assumption The environment is as follows. ・Windows 10 Home 64 bit
1. Install Python You can download it from the following. https://www.python.org/downloads/windows/
This time, install &amp;ldquo;Python 3.8.1 64bit&amp;rdquo; On the installation screen, check &amp;ldquo;Add Python 3.</description>
    </item>
    
    <item>
      <title>Make a compatibility judgment program with python&#39;s random module.</title>
      <link>https://japan2018.github.io/make-a-compatibility-judgment-program-with-pythons-random-module.-fb10f/</link>
      <pubDate>Mon, 16 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://japan2018.github.io/make-a-compatibility-judgment-program-with-pythons-random-module.-fb10f/</guid>
      <description>#Introduction  This is a game for beginners. Please feel free to read it.
This time, I made a program to judge compatibility with that child that I often see on the net.
#Program creation Let&amp;rsquo;s make it.
The goal this time is to enter the names of the two people you want to judge and to express the compatibility of those two as a percentage.
The random module is used for the% display part.</description>
    </item>
    
    <item>
      <title>Learn python gestures</title>
      <link>https://japan2018.github.io/learn-python-gestures-fccd5/</link>
      <pubDate>Tue, 10 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://japan2018.github.io/learn-python-gestures-fccd5/</guid>
      <description>I wrote in the last article that I used Visual Studio and Fortran, but rufiyaa has been a little bit programming so far. I also like using VBA at work, and I often repeat elaborate automation and make minor changes that make it useless.  In other words, I understand the basic parts such as programs and algorithms. Then, all that is needed to freely walk around the world of python is the expression method in python = python gesture.</description>
    </item>
    
    <item>
      <title>Beginners want to make a Rubik&#39;s Cube style thing in UE4 and make it a library for reinforcement learning #6</title>
      <link>https://japan2018.github.io/beginners-want-to-make-a-rubiks-cube-style-thing-in-ue4-and-make-it-a-library-for-reinforcement-learning-#6-fb445/</link>
      <pubDate>Mon, 02 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://japan2018.github.io/beginners-want-to-make-a-rubiks-cube-style-thing-in-ue4-and-make-it-a-library-for-reinforcement-learning-#6-fb445/</guid>
      <description>Continuing from the previous article, this article is about how beginners can make various Python libraries that involve UE4 (almost as a memorandum for themselves...).  First: #1 Last time: #5
Observation We will implement around I will write the control processing around the observed value. Basically, it is necessary to perform processing such as saving after the action, and the column of the action ID is prepared in the prepared SQLite table, so we will add the place to connect with BP to the action module ( I also thought about adding a module that uses PyActor for Observation separately, but I will add it to the action because cooperation with action relations becomes useless and complicated).</description>
    </item>
    
    <item>
      <title>Everything for beginners to be able to do machine learning</title>
      <link>https://japan2018.github.io/everything-for-beginners-to-be-able-to-do-machine-learning-fcd09/</link>
      <pubDate>Thu, 28 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://japan2018.github.io/everything-for-beginners-to-be-able-to-do-machine-learning-fcd09/</guid>
      <description>#Introduction  This article is for the purpose of enabling machine learning while doing what was presented as a &amp;ldquo;knowledge necessary for doing machine learning&amp;rdquo; **, which was issued as a subject for an internship destination. is. You will only become a Apprentice Machine Learning Engineer by doing all of this article. On the contrary, you can easily expose the basics of machine learning simply by doing all of this article.</description>
    </item>
    
  </channel>
</rss>