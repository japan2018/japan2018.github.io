<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title> floating decimal point on Memo Tut</title>
    <link>https://memotut.com/tags/floating-decimal-point/</link>
    <description>Recent content in  floating decimal point on Memo Tut</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 28 Jan 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://memotut.com/tags/floating-decimal-point/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Why is the floating point number of 0.1 greater than 0.1, but less than 1.0 when added 10 times [Part 1]</title>
      <link>https://memotut.com/why-is-the-floating-point-number-of-0.1-greater-than-0.1-but-less-than-1.0-when-added-10-times-part-1-85a8e/</link>
      <pubDate>Tue, 28 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://memotut.com/why-is-the-floating-point-number-of-0.1-greater-than-0.1-but-less-than-1.0-when-added-10-times-part-1-85a8e/</guid>
      <description>In this article, I found that converting ``0.1`` to a floating point number yields a slightly larger number than ``0.1``.  Why is 0.1 displayed as a floating point number but is displayed as 0.1 when printed? This means that if you add 0.1, positive errors should accumulate. For example, I expected that adding 0.1 ten times would be slightly larger than 1. I&amp;rsquo;ll give it a try.
total = 0 for i in range(10): total += 0.</description>
    </item>
    
    <item>
      <title>Why is 0.1 displayed when printed even though 0.1 cannot be represented exactly as a floating point number?</title>
      <link>https://memotut.com/why-is-0.1-displayed-when-printed-even-though-0.1-cannot-be-represented-exactly-as-a-floating-point-number-c03de/</link>
      <pubDate>Tue, 21 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://memotut.com/why-is-0.1-displayed-when-printed-even-though-0.1-cannot-be-represented-exactly-as-a-floating-point-number-c03de/</guid>
      <description>When ``0.1`` is substituted for ``x`` and displayed on the console, ``0.1`` is displayed.  x = 0.1 print(x) # =&amp;gt; 0.1 It seems obvious, but 0.1 cannot be represented exactly in floating point numbers (IEEE 754). However, it is strange that print is displayed when doing print. I write down what I learned about this.
#Environment This article uses Python 3.7.
[Assumption] Floating point number Throughout this article, the term &amp;ldquo;floating point number&amp;rdquo; refers to &amp;ldquo;IEEE 754 double precision&amp;rdquo;.</description>
    </item>
    
  </channel>
</rss>