<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title> data structure on Memo Tut</title>
    <link>https://memotut.com/tags/data-structure/</link>
    <description>Recent content in  data structure on Memo Tut</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 12 May 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://memotut.com/tags/data-structure/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[Python] Python data structure and internal implementation -List-</title>
      <link>https://memotut.com/python-data-structure-and-internal-implementation-list-6087b/</link>
      <pubDate>Tue, 12 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://memotut.com/python-data-structure-and-internal-implementation-list-6087b/</guid>
      <description>#Introduction  I use Qiita a lot, but this is my first post! Nice to meet you!
There are many useful articles on Python, but I don&amp;rsquo;t think many articles mention Python&amp;rsquo;s internal implementation so much, so I&amp;rsquo;m motivated to be able to link various data structure explanations with internal implementation. This time I will write about Python list.
About this article This article wrote about the Python list mechanism. However, it is impossible to write how all the methods in the list work, so mainly</description>
    </item>
    
    <item>
      <title>[Python] Python implementation of non-recursive Segment Tree</title>
      <link>https://memotut.com/python-implementation-of-non-recursive-segment-tree-afa12/</link>
      <pubDate>Mon, 06 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://memotut.com/python-implementation-of-non-recursive-segment-tree-afa12/</guid>
      <description>#Introduction  As the title suggests, I would like to introduce the implementation of non-recursive Segment Tree by **Python. If you already know it, you can skip it because I will start from the explanation of Segment Tree so that you do not need &amp;ldquo;almost&amp;rdquo; 1 of knowledge. â†’ Implementation of non-recursive segment tree
What is # Segment Tree It is a data structure that is commonly called segment tree, segment tree, etc.</description>
    </item>
    
    <item>
      <title>[Python] What to use for Python stacks and queues (speed comparison of each data structure)</title>
      <link>https://memotut.com/what-to-use-for-python-stacks-and-queues-speed-comparison-of-each-data-structure-107c4/</link>
      <pubDate>Sun, 01 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://memotut.com/what-to-use-for-python-stacks-and-queues-speed-comparison-of-each-data-structure-107c4/</guid>
      <description>#Introduction  This article is primarily about competitive programming.
There are several ways to implement stacks and queues in Python.
 Stack -Use list (append(), pop()) -Use collections.deque (append(), pop()) Queue -Use list (append(), pop(0)) -Use collections.deque (append(), popleft()) -Use queue.Queue (put(), get())  Which of these is the best to use? This time I will investigate it focusing on the speed aspect.
#Measurement method For each data structure, elements are added and extracted 10 times, 100 times, 1000 times, 10000 times, 100000 times.</description>
    </item>
    
  </channel>
</rss>