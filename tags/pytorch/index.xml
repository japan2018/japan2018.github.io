<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>PyTorch on Some Title</title>
    <link>https://japan2018.github.io/tags/pytorch/</link>
    <description>Recent content in PyTorch on Some Title</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 28 Mar 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://japan2018.github.io/tags/pytorch/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Sy wave prediction (regression) with Pytorch</title>
      <link>https://japan2018.github.io/sy-wave-prediction-regression-with-pytorch-fe2d3/</link>
      <pubDate>Sat, 28 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://japan2018.github.io/sy-wave-prediction-regression-with-pytorch-fe2d3/</guid>
      <description>#Overview  Hello. A new employee of an IT company. Here, I described a sine wave prediction regression model learning program as a sample using Pytorch which is an open source machine learning library. (It&amp;rsquo;s not a time series forecast&amp;hellip; I also want to do a time series forecast.)
By moving chainer to pytorch, I was late, but I wrote it because I am trying to catch up this time. It also describes what I felt the difference.</description>
    </item>
    
    <item>
      <title>How to call PyTorch in Julia</title>
      <link>https://japan2018.github.io/how-to-call-pytorch-in-julia-fda27/</link>
      <pubDate>Thu, 05 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://japan2018.github.io/how-to-call-pytorch-in-julia-fda27/</guid>
      <description># Overview  Create a virtual environment with Conda, enable PyTorch in Python in that virtual environment, make PyCall recognize that Python, and call it with Julia.
 Conda https://conda.io/en/latest/ Python https://docs.python.org/3/ PyTorch https://pytorch.org/docs/stable/index.html PyCall https://github.com/JuliaPy/PyCall.jl Julia https://docs.julialang.org/en/v1/  The procedure is as follows.
 Install Conda in a shell. Create a virtual environment with Conda. Make PyTorch available in the virtual environment. Install Julia. Install PyCall to reference Python in the virtual environment.</description>
    </item>
    
    <item>
      <title>Steps to build PyTorch 1.5 for CUDA 10.2 on Windows</title>
      <link>https://japan2018.github.io/steps-to-build-pytorch-1.5-for-cuda-10.2-on-windows-fd1fa/</link>
      <pubDate>Thu, 05 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://japan2018.github.io/steps-to-build-pytorch-1.5-for-cuda-10.2-on-windows-fd1fa/</guid>
      <description>Here are the steps to build PyTorch 1.5 for CUDA 10.2 on Windows 10. (As of March 1, 2020)  It also contains the torchvision build instructions that are often used with PyTorch. Detailed explanations are omitted here, so if you need more detailed explanations, also refer to Blog-dev.infohub.cc. I hope you will.
#Build environment
 hardware -CPU: AMD Threadripper 3960X -GPU: nVIDIA TITAN RTX Software -Windows 10 Pro Version 1909 (x64) -Microsoft Visual Studio Community 2019 â€“ Ver 16.</description>
    </item>
    
    <item>
      <title>Display image after Data Augmentation with Pytorch</title>
      <link>https://japan2018.github.io/display-image-after-data-augmentation-with-pytorch-feb9f/</link>
      <pubDate>Mon, 10 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://japan2018.github.io/display-image-after-data-augmentation-with-pytorch-feb9f/</guid>
      <description>##background  **I want to display the image after data augmentation! **
I decided to implement it.
Data Augmentation is a technology to inflate one image, and the following operations are added.
 Random Crop Random Horizontal Flip (the image is horizontally flipped with a certain probability) Random Erasing (randomly add noise to a part of the image) Random Affine (scales images randomly)  There are many other things.
##Implementation</description>
    </item>
    
    <item>
      <title>Learn while making! Deep reinforcement learning_1</title>
      <link>https://japan2018.github.io/learn-while-making-deep-reinforcement-learning_1-fc266/</link>
      <pubDate>Wed, 18 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://japan2018.github.io/learn-while-making-deep-reinforcement-learning_1-fc266/</guid>
      <description># Deep Reinforcement Learning-Practical Programming with Pytorch-  I am Harima, a 1st year master of science graduate student. I will summarize my learning contents in a memo. I&amp;rsquo;m sorry it&amp;rsquo;s hard to see. I would like to know what you do not understand.
 Implementation code (GitHub) https://github.com/YutaroOgawa/Deep-Reinforcement-Learning-Book
 Chap.2 Let&amp;rsquo;s implement reinforcement learning for maze tasks 2.1 How to use Python 2.2 Implement mazes and agents import numpy as np import matplotlib.</description>
    </item>
    
  </channel>
</rss>