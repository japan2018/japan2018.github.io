<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Flask on Some Title</title>
    <link>https://japan2018.github.io/tags/flask/</link>
    <description>Recent content in Flask on Some Title</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 02 Mar 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://japan2018.github.io/tags/flask/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Flask introduction ~ Blueprint application note</title>
      <link>https://japan2018.github.io/flask-introduction-~-blueprint-application-note-fb7d1/</link>
      <pubDate>Mon, 02 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://japan2018.github.io/flask-introduction-~-blueprint-application-note-fb7d1/</guid>
      <description>Let&#39;s try the title as easily as possible.  Blueprint allows you to implement the functionality of your application in pieces. Blueprint is officially recommended as a way to organize bloated projects.
Install Flask $ sudo pip3 install flask Directory structure $ cd ~/workspace/sample-flask/ $ls server.py from flask import Flask app = Flask(__name__) @app.route(&amp;#39;/&amp;#39;) def func_1(): return&amp;#39;Hello world&amp;#39; @app.route(&amp;#39;/test&amp;#39;) def func_2(): return&amp;#39;Test&amp;#39; if __name__ ==&amp;#39;__main__&amp;#39;: app.run(host=&amp;#39;0.0.0.0&amp;#39;, port=80, debug=True) Execution command $python3 server.</description>
    </item>
    
    <item>
      <title>Flask-Create Web Service with SQLAlchemy &#43; PostgreSQL</title>
      <link>https://japan2018.github.io/flask-create-web-service-with-sqlalchemy-postgresql-fa599/</link>
      <pubDate>Sun, 12 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://japan2018.github.io/flask-create-web-service-with-sqlalchemy-postgresql-fa599/</guid>
      <description># Flask-Create a web service with SQLAlchemy + PostgreSQL  Introduction We will introduce using a sample application (Feedback).
This article is for Mac environment, but the procedure is the same for Windows environment. Please read the environment-dependent part and try again. 
Purpose After reading this article, you&amp;rsquo;ll be able to:
| No. | Overview | Keywords | | :&amp;mdash; | :&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash; | :&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash; &amp;mdash;&amp;ndash; | | 1 | Flask-SQLAlchemy Development | Flask-SQLAlchemy, psycopg2 | | 2 | PostgreSQL settings | psql, Flask-Migrate |</description>
    </item>
    
    <item>
      <title>GET/POST communication with Flask (and for CORS support)</title>
      <link>https://japan2018.github.io/get-post-communication-with-flask-and-for-cors-support-fa72c/</link>
      <pubDate>Fri, 10 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://japan2018.github.io/get-post-communication-with-flask-and-for-cors-support-fa72c/</guid>
      <description># Overview  Since the content of POST communication in Flask was ambiguous, both GET/POST communication are summarized here. ▽ There are &amp;ldquo;Communication in form&amp;rdquo;/&amp;ldquo;Communication in Json format&amp;rdquo; as contents. When you search for &amp;ldquo;Flask POST&amp;rdquo;, the information is messed up. By the way, it is Python 3.7.
#GET communication
from flask import Flask, request, jsonfy app = Flask(__name__) @app.route(&amp;#34;/&amp;#34;, methods=[&amp;#34;POST&amp;#34;]) def test(): data = request.args.get(&amp;#39;hoge&amp;#39;, ``) # Get value of hoge=value return data # Return as it is for sample POST communication Communication in Json format from flask import Flask, request, jsonfy import json app = Flask(__name__) @app.</description>
    </item>
    
    <item>
      <title>Until the API made with Flask&#43;MySQL is converted to Docker</title>
      <link>https://japan2018.github.io/until-the-api-made-with-flask-mysql-is-converted-to-docker-fe666/</link>
      <pubDate>Fri, 10 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://japan2018.github.io/until-the-api-made-with-flask-mysql-is-converted-to-docker-fe666/</guid>
      <description>## this is?  I want to make an API. I want to make it with Flask+MySQL. And I want to make it Docker. Make a note of this procedure. I don&amp;rsquo;t really know where to use Docker, so concentrate on this.
things to do  Create a simple API with Flask alone. Convert 2.1 to Docker. Prepare MySQL. Enable the integration of Flask and MySQL with docker-compose.  1. Create a simple API with Flask alone.</description>
    </item>
    
    <item>
      <title>[LINE Messaging API] Create parrot return BOT in Python</title>
      <link>https://japan2018.github.io/line-messaging-api-create-parrot-return-bot-in-python-fd865/</link>
      <pubDate>Mon, 02 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://japan2018.github.io/line-messaging-api-create-parrot-return-bot-in-python-fd865/</guid>
      <description>##チュートリアル  ####【メッセージを受信する場合】 WebhookHandlerを下記の様に設定 @handler.add(MessageEvent, message=TextMessage)
from flask import Flask, request, abort from linebot import ( LineBotApi, WebhookHandler ) from linebot.exceptions import ( InvalidSignatureError ) from linebot.models import ( MessageEvent, TextMessage, TextSendMessage, ) app = Flask(__name__) line_bot_api = LineBotApi(&amp;#39;YOUR_CHANNEL_ACCESS_TOKEN&amp;#39;) handler = WebhookHandler(&amp;#39;YOUR_CHANNEL_SECRET&amp;#39;) @app.route(&amp;#34;/callback&amp;#34;, methods=[&amp;#39;POST&amp;#39;]) def callback(): # get X-Line-Signature header value signature = request.headers[&amp;#39;X-Line-Signature&amp;#39;] # get request body as text body = request.get_data(as_text=True) app.logger.info(&amp;#34;Request body: &amp;#34; + body) # handle webhook body try: handler.</description>
    </item>
    
    <item>
      <title>Get Boolean with Flask request</title>
      <link>https://japan2018.github.io/get-boolean-with-flask-request-fcd45/</link>
      <pubDate>Tue, 19 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://japan2018.github.io/get-boolean-with-flask-request-fcd45/</guid>
      <description>#Environment   python 3.7.0 Flask 1.0.2  #First SOURCE API that only receives and returns bool type is_hoge with request
from flask import Flask, request app = Flask(__name__) @app.route(&amp;#34;/&amp;#34;, methods=[&amp;#39;GET&amp;#39;]) def hello(): is_hoge = request.args.get(&amp;#39;is_hoge&amp;#39;, type=bool) return f&amp;#39;{ is_hoge }&amp;#39; if __name__ == &amp;#34;__main__&amp;#34;: app.run() Expected value  True if you send true False if you send false False if you send 0  Execution result  if you send true  if you send false  If you send 0   What do you say?</description>
    </item>
    
  </channel>
</rss>