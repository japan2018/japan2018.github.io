<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>password on Memo Tut</title>
    <link>https://memotut.com/tags/password/</link>
    <description>Recent content in password on Memo Tut</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 27 Mar 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://memotut.com/tags/password/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[Python] Pattern-specified password generator</title>
      <link>https://memotut.com/28b0523a3/</link>
      <pubDate>Fri, 27 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://memotut.com/28b0523a3/</guid>
      <description>I want a password that doesn&#39;t flicker, so I&#39;ll create a password generator of the form that specifies a pattern in python.  Python program #!/usr/bin/env python flag_debug = False flag_verbose = False flag_syntax = False def debug(msg): if flag_debug: print(msg) def verbose(msg): if flag_verbose: print(msg) def import_random(): try: from Crypto.Random import random verbose(&amp;#39;import Crypto.Random&amp;#39;) return random except ImportError: pass try: import secrets verbose(&amp;#39;import secrets&amp;#39;) return secrets except ImportError: pass import random verbose(&amp;#39;import random&amp;#39;) return random def charset_(r, x=&amp;#39;&amp;#39;): s =&amp;#39;&amp;#39; for c in r: c = chr(c) if c not in x: s = s + c return s def charset(s, x=&amp;#39;&amp;#39;): r =&amp;#39;&amp;#39; while len(s) &amp;gt;= 3: if s[1] !</description>
    </item>
    
  </channel>
</rss>