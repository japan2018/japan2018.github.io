<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>nginx on Memo Tut</title>
    <link>https://memotut.com/tags/nginx/</link>
    <description>Recent content in nginx on Memo Tut</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 31 Jan 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://memotut.com/tags/nginx/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[Python] Build a Django development environment with Docker! (Docker-compose/Django/postgreSQL/nginx)</title>
      <link>https://memotut.com/build-a-django-development-environment-with-docker-docker-compose-django-postgresql-nginx-24236/</link>
      <pubDate>Fri, 31 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://memotut.com/build-a-django-development-environment-with-docker-docker-compose-django-postgresql-nginx-24236/</guid>
      <description>I tried rebuilding!  Rebuild Django development environment with Docker! ! ! ! 
#Introduction
Team development&amp;hellip; It&amp;rsquo;s very difficult to build an environment&amp;hellip; At that time, use Docker (miscellaneous).
This article is a repost of what I gave to qrunchLet&amp;rsquo;s build a Django/postgreSQL/gunicorn/nginx development environment using Docker and Docker-compose, which are very convenient for team development! !
The whole flow is based on almost the following sites, but I intend to make the article easy to understand, such as putting comments in almost all lines of the configuration file etc.</description>
    </item>
    
    <item>
      <title>[Python] Create Nginx &#43; uWSGI &#43; Python (Django) environment with docker</title>
      <link>https://memotut.com/create-nginx-uwsgi-python-django-environment-with-docker-7d72d/</link>
      <pubDate>Sun, 15 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://memotut.com/create-nginx-uwsgi-python-django-environment-with-docker-7d72d/</guid>
      <description>This article is from the 16th day of [Web Crew Advent Calendar 2019](https://qiita.com/advent-calendar/2019/webcrew).  Yesterday was @Hideto-Kiyoshima-wc&amp;rsquo;s Introduction to Scala Option/Either/Try Super.
#Introduction My name is @yagiyuuuu, my second year since joining Web Crew Co., Ltd. with a fresh graduate. Currently, I am developing an application environment of Nginx + uWSGI + Python (Django) using Docker. I&amp;rsquo;ve written this article in the hope that it will help anyone developing apps with Django.</description>
    </item>
    
    <item>
      <title>[Python] Deploy Django in 3 minutes using docker-compose</title>
      <link>https://memotut.com/deploy-django-in-3-minutes-using-docker-compose-d3a56/</link>
      <pubDate>Tue, 26 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://memotut.com/deploy-django-in-3-minutes-using-docker-compose-d3a56/</guid>
      <description>I have created docker-compose in a form that can be used even for projects that have already been created, so I will summarize the specifications in an article.  ** Please see How to Use on GitHub → GitHub**
(I&amp;rsquo;m sorry if you change the DB from the default sqlite&amp;hellip;
The deployment environment is Django＋Nginx＋Gunicorn.
Overview Please refer to the README on GitHub for how to use the link provided above.</description>
    </item>
    
    <item>
      <title>[Python] Run python wsgi server on NGINX Unit</title>
      <link>https://memotut.com/run-python-wsgi-server-on-nginx-unit-ffb96/</link>
      <pubDate>Fri, 08 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://memotut.com/run-python-wsgi-server-on-nginx-unit-ffb96/</guid>
      <description>With the release of NGINX Unit, I feel that I can use it as an application server that runs WSGI for Python. For the time being, I tried to run Hello World.  Trial environment  vagrant ubuntu/xenial64 python3.5  Install NGINX Unit Install the ubuntu package version referring to here. https://github.com/nginx/unit#ubuntu-packages
And start
$ sudo service unitd start #Create python application Create a python application with wsgi. Place a file called wsgi.</description>
    </item>
    
    <item>
      <title>[Python] Flask &#43; Gunicorn &#43; Nginx &#43; Supervisor until it works</title>
      <link>https://memotut.com/flask-gunicorn-nginx-supervisor-until-it-works-fb28e/</link>
      <pubDate>Sun, 27 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>https://memotut.com/flask-gunicorn-nginx-supervisor-until-it-works-fb28e/</guid>
      <description># Flask + Gunicorn + Nginx + Supervisor Until it works properly   Reference: Run the flask application with nginx/gunicorn/supervisor | http://blog.shun-ichiro.com/howto/nginx-gunicorn-supervisor-flask/
 Information  www directory: /var/www Flask app directory: /var/www/apps/ Directory containing scripts used this time: /var/www/apps/sampleapp/  Flask Base script: /var/www/apps/sampleapp/sample.py
#!/usr/bin/env python #coding: utf-8 from flask import Flask app = Flask(&amp;#34;sample&amp;#34;) @app.route(&amp;#34;/sample&amp;#34;) # Top directory / to use separately def index(): return &amp;#34;&amp;lt;h1&amp;gt;Hello World&amp;lt;/h1&amp;gt;&amp;#34; if __name__ == &amp;#34;__main__&amp;#34;: app.</description>
    </item>
    
  </channel>
</rss>