<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title> C on Memo Tut</title>
    <link>https://memotut.com/tags/c/</link>
    <description>Recent content in  C on Memo Tut</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 12 May 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://memotut.com/tags/c/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Python data structure and internal implementation -List-</title>
      <link>https://memotut.com/python-data-structure-and-internal-implementation-list-6087b/</link>
      <pubDate>Tue, 12 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://memotut.com/python-data-structure-and-internal-implementation-list-6087b/</guid>
      <description>#Introduction  I use Qiita a lot, but this is my first post! Nice to meet you!
There are many useful articles on Python, but I don&amp;rsquo;t think many articles mention Python&amp;rsquo;s internal implementation so much, so I&amp;rsquo;m motivated to be able to link various data structure explanations with internal implementation. This time I will write about Python list.
About this article This article wrote about the Python list mechanism. However, it is impossible to write how all the methods in the list work, so mainly</description>
    </item>
    
    <item>
      <title>I made a module in C language that applies a filter to the image read in Python</title>
      <link>https://memotut.com/i-made-a-module-in-c-language-that-applies-a-filter-to-the-image-read-in-python-a2368/</link>
      <pubDate>Fri, 24 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://memotut.com/i-made-a-module-in-c-language-that-applies-a-filter-to-the-image-read-in-python-a2368/</guid>
      <description>At work I had to do image processing using Python. It&#39;s okay if it can be done by OpenCV etc., but the filter of the original algorithm will not be practical unless it is C/C++. So I made a module for Python in C language.  If you want to try it out quickly, please use my repository. https://github.com/soramimi/pymodule-image-filter
How to make your own module for Python Install dependent modules The first trial is helloworld, so it is not necessary, but numpy, pillow, and matplotlib are used in the later image processing section, so these modules must be installed.</description>
    </item>
    
    <item>
      <title>The story that the algorithm came out with a ridiculous conclusion when trying to solve the traveling salesman problem appropriately</title>
      <link>https://memotut.com/the-story-that-the-algorithm-came-out-with-a-ridiculous-conclusion-when-trying-to-solve-the-traveling-salesman-problem-appropriately-ec2e3/</link>
      <pubDate>Thu, 12 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://memotut.com/the-story-that-the-algorithm-came-out-with-a-ridiculous-conclusion-when-trying-to-solve-the-traveling-salesman-problem-appropriately-ec2e3/</guid>
      <description>This article is from the 13th day of [Furukawa Lab Advent_calendar](https://qiita.com/advent-calendar/2019/flab).  This article was written by a student of Furukawa Lab as part of their studies. The content may be ambiguous or the expressions may be slightly different.
#Introduction Hello everyone Do you know the traveling salesman problem? It&amp;rsquo;s a kind of common combinatorial optimization problem, but in this article I&amp;rsquo;d like to write about a sad case when I tried to solve the traveling salesman problem appropriately.</description>
    </item>
    
    <item>
      <title>Make Awaitable with Python/C API</title>
      <link>https://memotut.com/make-awaitable-with-python-c-api-1f737/</link>
      <pubDate>Sun, 01 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://memotut.com/make-awaitable-with-python-c-api-1f737/</guid>
      <description>Introduction  ========
This year is nearing the end of the year, so I will wastefully use Python C/API. Reversal of purpose and means. This time, we aim to use Awaitable as something like Coroutine obtained by executing the following coroutine function spam.
import asyncio import sys async def spam(): print(&amp;#39;do something&amp;#39;) ret = await asyncio.sleep(1,&amp;#39;RETURN VALUE&amp;#39;) return ret.lower() async def main(): ret = await spam() print(ret) if __name__ ==&amp;#39;__main__&amp;#39;: if sys.</description>
    </item>
    
    <item>
      <title>Why VBScript True is -1</title>
      <link>https://memotut.com/why-vbscript-true-is-1-4ef82/</link>
      <pubDate>Thu, 21 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://memotut.com/why-vbscript-true-is-1-4ef82/</guid>
      <description>According to the following documentation, VBScript&#39;s True is equivalent to `-1`.  True keyword 
Also, False is equivalent to 0.
False keyword 
On the other hand, in the C language, true is equivalent to 1 and false is equivalent to 0 in stdbool.h.
#ifndef __cplusplus  #define bool _Bool #define true 1 #define false 0  #else /* __cplusplus */Also, in JavaScript, if you cast true to an integer type, it will be 1.</description>
    </item>
    
  </channel>
</rss>