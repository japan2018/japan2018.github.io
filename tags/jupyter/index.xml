<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title> Jupyter on Memo Tut</title>
    <link>https://memotut.com/tags/jupyter/</link>
    <description>Recent content in  Jupyter on Memo Tut</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 12 Apr 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://memotut.com/tags/jupyter/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Procedure to attach to JupyterLab on remote server from VS Code and debug</title>
      <link>https://memotut.com/procedure-to-attach-to-jupyterlab-on-remote-server-from-vs-code-and-debug-3b921/</link>
      <pubDate>Sun, 12 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://memotut.com/procedure-to-attach-to-jupyterlab-on-remote-server-from-vs-code-and-debug-3b921/</guid>
      <description># 1. Explain in this post  Follow the steps below to build an environment for debugging using JupyterLab and VS Code.
 Start JupyterLab on the remote server Call the Python class from JupyterLab. Remotely attach to the above notebook of JupyterLab from VS Code on the local PC for debugging. Illustrated below.  If you watch the video below, you will have an image of what you can do specifically.</description>
    </item>
    
    <item>
      <title>How to build Python and Jupyter execution environment with VS Code</title>
      <link>https://memotut.com/how-to-build-python-and-jupyter-execution-environment-with-vs-code-f0788/</link>
      <pubDate>Mon, 30 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://memotut.com/how-to-build-python-and-jupyter-execution-environment-with-vs-code-f0788/</guid>
      <description>I have summarized how to build Python and Jupyter execution environment with VS Code. I use Anaconda.  Also, I think that many people who analyze data with Python use Jupyter notebook and Jupyter Lab from their browsers. VS Code is also recommended for such people.
Also, this article is part of the article How to create a Python package using VS Code.
We will proceed on the assumption that Anaconda has been downloaded.</description>
    </item>
    
    <item>
      <title>Parse Apache access logs with Pandas and Matplotlib</title>
      <link>https://memotut.com/parse-apache-access-logs-with-pandas-and-matplotlib-79cd4/</link>
      <pubDate>Tue, 24 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://memotut.com/parse-apache-access-logs-with-pandas-and-matplotlib-79cd4/</guid>
      <description>## Overview  Even if you try to analyze the access log of Apache, Tomcat, etc., it is not a surprisingly good tool. I would like to have a tool that supports various output formats and that can filter only the necessary information and visualize it easily, but I can not find it easily.
So, I tried using Pandas and Matplotlib, which are standard in the world of data analysis, to analyze and visualize Apache access logs on Jupyter Notebook.</description>
    </item>
    
    <item>
      <title>The result of making and sharing an Italian honeymoon map album in Python</title>
      <link>https://memotut.com/the-result-of-making-and-sharing-an-italian-honeymoon-map-album-in-python-4e136/</link>
      <pubDate>Thu, 05 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://memotut.com/the-result-of-making-and-sharing-an-italian-honeymoon-map-album-in-python-4e136/</guid>
      <description>I went on a honeymoon to Italy a while ago. I took about 1,000 photos when I noticed it on a tour of Milan, Venice, Florence, Pisa, Rome and Pompeii in one week.  There was some free time, so I took a walk around 10,000 steps every day, so I wanted to make a record with the route included, so I made a map album&amp;hellip;!
Visualization The whole picture looks something like this.</description>
    </item>
    
    <item>
      <title>Kaggle&#39;s feature management was better than I thought with PostgreSQL, so I made a directory that anyone can use with Docker</title>
      <link>https://memotut.com/kaggles-feature-management-was-better-than-i-thought-with-postgresql-so-i-made-a-directory-that-anyone-can-use-with-docker-44814/</link>
      <pubDate>Fri, 20 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://memotut.com/kaggles-feature-management-was-better-than-i-thought-with-postgresql-so-i-made-a-directory-that-anyone-can-use-with-docker-44814/</guid>
      <description>This article is from the 19th day of [Kaggle Advent Calendar 2019](https://qiita.com/advent-calendar/2019/kaggle).  Hi, my name is kiccho1101! Writing an article for the first time in my life! Thank you!
Introduction This time, I tried to use Kaggle&amp;rsquo;s feature quantity management with PostgreSQL, but it was faster than I thought, so I would like to introduce it.
The created directory is here: https://github.com/kiccho1101/datascience-template ↑ The README has a usage example using the data of Titanic competition.</description>
    </item>
    
    <item>
      <title>[For beginners] Build a Python environment that you can enjoy by copying and copying, scraping, machine learning, and practical application [Look for affordable rental properties with SUUMO! ]</title>
      <link>https://memotut.com/for-beginners-build-a-python-environment-that-you-can-enjoy-by-copying-and-copying-scraping-machine-learning-and-practical-application-look-for-affordable-rental-properties-with-suumo-8ea9b/</link>
      <pubDate>Wed, 18 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://memotut.com/for-beginners-build-a-python-environment-that-you-can-enjoy-by-copying-and-copying-scraping-machine-learning-and-practical-application-look-for-affordable-rental-properties-with-suumo-8ea9b/</guid>
      <description>#Introduction  Everyone, do you like data analysis __?
Nice to meet you! I&amp;rsquo;m @haraso_1130 who is the mentor at DMM WEB CAMP
Suddenly, look at the image below.
What a property in 23 wards of Tokyo is 5DK 80,000 yen! ? If you are in the 23 wards, you can comfortably do 80,000 a room a month &amp;hellip;
This property is Using &amp;ldquo;Python&amp;rdquo; Collecting data by &amp;ldquo;scraping&amp;rdquo; Results of data analysis using &amp;ldquo;machine learning&amp;rdquo; It is a property that we were able to discover.</description>
    </item>
    
    <item>
      <title>Easily build a GCP environment for Kaggle at high speed</title>
      <link>https://memotut.com/easily-build-a-gcp-environment-for-kaggle-at-high-speed-507fc/</link>
      <pubDate>Wed, 18 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://memotut.com/easily-build-a-gcp-environment-for-kaggle-at-high-speed-507fc/</guid>
      <description>#GCP had a great feature added  Previously, I wrote an article Easily build a GCP environment for Kaggle. This time, I found an easier way to build it, so I&amp;rsquo;ll write it as an improved version of the previous article. A notebook function has been added to the lower AI platform. What this means is that you can get it ready for use without having to do the work to make the jupyter notebook introduced in the previous article.</description>
    </item>
    
    <item>
      <title>Jupyter Notebook essential for software development</title>
      <link>https://memotut.com/jupyter-notebook-essential-for-software-development-25a5d/</link>
      <pubDate>Mon, 16 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://memotut.com/jupyter-notebook-essential-for-software-development-25a5d/</guid>
      <description>Hello. I&#39;m a software engineer who makes various embedded systems, games, web apps, iOS apps, signage control systems, etc.  About two and a half years ago, I thought that I should write in Python as a general-purpose scripting language that is difficult to realize only with a shell, and I was trying to learn Python while suffering. Since I only use it occasionally, I was at a level where I forget how to write if and for loops every time.</description>
    </item>
    
    <item>
      <title>[Complete Edition] Jupyter Notebook Shortcut</title>
      <link>https://memotut.com/complete-edition-jupyter-notebook-shortcut-baa2a/</link>
      <pubDate>Mon, 09 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://memotut.com/complete-edition-jupyter-notebook-shortcut-baa2a/</guid>
      <description># Jupyter Notebook Shortcut  The shortcut list that appears in h in Jupyter Notebook has been translated into Japanese for both Windows and Mac. I searched, but I didn&amp;rsquo;t have a list of all Windows and Mac in Japanese, so maybe it&amp;rsquo;s in demand?
Only the commands that you should remember are in bold.
Windows Command mode    Shortcut key Description     F Search/Replace   Ctrl-Shift-F Open Command Palette   Ctrl-Shift-P Open Command Palette   Enter Enter edit mode   P Open Command Palette   Shift-Enter ** Execute cell and move to cell below **   Ctrl-Enter ** Execute cell **   Alt-Enter Execute cell and add cell below   Y ** Make a code cell **   M ** Mark down cell **   R Raw cell   1 Heading 1   2 Heading 2   3 Heading 3   4 Heading 4   5 Heading 5   6 Heading 6   K ** Select upper cell **   Up Select upper cell   Down Select cell below   J ** Select cell below **   Shift-K Merge with the cell above   Shift-Up Merge with upper cell   Shift-Down Merge with cell below   Shift-J Combine with the cell below   A ** Add a cell above **   B Add a cell below   X ** Cut the selected cell **   C ** Copy selected cell **   Shift-V Paste on top   V ** Paste below **   Z ** Redo cell deletion **   DD ** Delete the selected cell **   Shift-M ** Merging cells (with lower cell if not selected) **   Ctrl-S Save   S Save   L Show/hide line numbers   O ** Show/hide cell output result **   Shift-O Output result scrolling/non-scrolling   H ** Display keyboard shortcuts **   I×2 ** Kernel interrupt **   0 Reboot the kernel   Esc Close Pager   Q Close Pager   Shift-L Show/hide line numbers of all cells   Shift-Space Scroll up   Space Scroll down    Edit mode    Shortcut key Description     Tab Code completion tab   Shift-Tab Tooltip   Ctrl-] Indent   Ctrl-[ ** Dedent **   Ctrl-A Select All   Ctrl-Z Redo   Ctrl-Shift-Z Redo   Ctrl-Y Redo   Ctrl-Home Move to beginning of cell   Ctrl-Up Move to beginning of cell   Ctrl-End Move to end of cell   Ctrl-Down Move to end of cell   Ctrl-Left Move to previous word   Ctrl-Right Move to next word   Ctrl-Backspace Delete previous word   Ctrl-Delete Delete next word   Ctrl-M Enter command mode   Ctrl-Shift-F Open Command Palette   Ctrl-Shift-P Open Command Palette   Esc Enter command mode   Shift-Enter **Execute a cell and select the cell below **   Ctrl-Enter ** Execute cell **   Alt-Enter Execute cell and add cell below   Ctrl-Shift-Minus Split cells   Ctrl-S Save   Down Move cursor down   Up Move cursor up   Ctrl-/ ** Comment out selected part **    Mac OS ↩ = Enter ⌘ = Command ⇧ = Shift ⌥ = Option ␣ = Space ⇥ = Tab Command mode    Shortcut key Description     F Search/Replace   ↩ ** Enter edit mode **   ⌘⇧ F Open Command Palette   ⌘⇧P Open Command Palette   P Open Command Palette   ** ⇧ ↩ ** ** Execute cell and move to cell below **   ⌃↩ ** Run the cell **   ⌥↩ Execute cell and add cell below   Y ** Make a code cell **   M ** Mark down cell **   R Raw cell   1 Heading 1   2 Heading 2   3 Heading 3   4 Heading 4   5 Heading 5   6 Heading 6   K ** Select upper cell **   ↑ Select upper cell   ↓ Select cell below   J ** Select cell below **   ⇧ K Combine with the cell above   ⇧↑ Combine with the cell above   ⇧↓ Combine with the cell below   ⇧ J Combine with the cell below   A ** Add a cell above **   B Add a cell below   X ** Cut the selected cell **   C ** Copy selected cell **   ⇧ V Paste on top   Z ** Redo cell deletion **   D→D ** Delete the selected cell **   ** ⇧ M** ** Merging cells (with lower cell if not selected) **   ⌘S ** Save **   S Save   L Show/hide line numbers   O ** Show/hide cell output result **   ⇧ O Output result scroll/non-scroll   H ** Display keyboard shortcuts **   I → I ** Interrupt the kernel **   0 Reboot the kernel   Esc Close Pager   Q Close Pager   ⇧ L Show/hide row numbers of all cells   ⇧␣ Scroll up   ␣ Scroll down    Edit mode    Shortcut key Description     ⇥ ** Code completion/tabs **   ⇧⇥ Tooltip   ⌘] ** Indent **   ⌘[ ** Dedent **   ⌘A ** Full selection **   ⌘Z ** Redo **   ⌘/ ** Comment out **   ⌘D Delete line   ⌘U Cancel selection   Insert Toggle overwriting   ⌘↑ Move to end of cell   ⌘↓ Move to end of cell   ⌥← Move to previous word   ⌥ → Move to next word   ⌥⌫ Delete previous word   ⌥⌦ Delete the word after   ⌘⇧Z Redo   ⌘⇧ U Redo selection   ⌃K emacs-style line kill   ⌘⌫ Erase to the left of the cursor   ⌘⌦ Erase to the right of the cursor   ⌃M Enter command mode   Esc Enter command mode   ⌘⇧ F Open Command Palette   ⌘⇧P Open Command Palette   ⇧↩ ** Run a cell and select the cell below **   ⌃↩ ** Run the cell **   ⌥↩ Execute cell and insert cell below   ⌃⇧ Minus ** Split cells **   ⌘S ** Save **   ↓ Move cursor down   ↑ Move cursor up    #Feelings I made a lot of momentum, so there may be mistakes.</description>
    </item>
    
    <item>
      <title>[Super introduction] Machine learning using Python-From environment construction to simple perceptron implementation-</title>
      <link>https://memotut.com/super-introduction-machine-learning-using-python-from-environment-construction-to-simple-perceptron-implementation-365f3/</link>
      <pubDate>Sat, 07 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://memotut.com/super-introduction-machine-learning-using-python-from-environment-construction-to-simple-perceptron-implementation-365f3/</guid>
      <description># First of all  This article is from the 7th day of the DMM WEBCAMP Advent Calendar. This time it&amp;rsquo;s a super introduction, so I created it for those who have never tried machine learning but want to start **.
The purpose is to get a rough idea of machine learning and try to implement a basic simple perceptron for the time being, so I&amp;rsquo;ve written a lot about the explanation of machine learning etc.</description>
    </item>
    
    <item>
      <title>Complete everything with Jupyter ~Introduction to nbdev~</title>
      <link>https://memotut.com/complete-everything-with-jupyter-~introduction-to-nbdev~-c4634/</link>
      <pubDate>Wed, 04 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://memotut.com/complete-everything-with-jupyter-~introduction-to-nbdev~-c4634/</guid>
      <description>This article was posted on the 4th day of the Buchan Advent Calendar 2019.  This is an article for Jupyterer. Please check the formula for more details, as some are not fully understood. 
What is nbdev Perhaps succinctly, it&amp;rsquo;s a Python programming environment that completes your work in one Jupyter Notebook by including the role of an IDE. Created by fast.aiandcurrentlyindevelopmentfastaiv2 also uses nbdev.
At present, trial and error such as EDA and model construction are often done using Jupyter Notebook, and it exists as a role of &amp;ldquo;exploring&amp;rdquo;.</description>
    </item>
    
    <item>
      <title>Process %time, %timeit results</title>
      <link>https://memotut.com/process-time-timeit-results-8c8a0/</link>
      <pubDate>Wed, 04 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://memotut.com/process-time-timeit-results-8c8a0/</guid>
      <description>It&#39;s well known that you can measure execution time with `%time` or `%timeit` in Jupyter/IPython, but have you ever wanted to process or visualize this?  You can use standard output as a Python object by using %%capture. Let&amp;rsquo;s actually do it.
%%capture result %timeit 2 ** 100 The argument of %%capture is the object name, see help for other options.
 %capture [--no-stderr] [--no-stdout] [--no-display] [output] run the cell, capturing stdout, stderr, and IPython&#39;s rich display() calls.</description>
    </item>
    
    <item>
      <title>Kaggle&#39;s initial equipment-a cell that collects frequently used codes-</title>
      <link>https://memotut.com/kaggles-initial-equipment-a-cell-that-collects-frequently-used-codes-c946c/</link>
      <pubDate>Sat, 30 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://memotut.com/kaggles-initial-equipment-a-cell-that-collects-frequently-used-codes-c946c/</guid>
      <description>#Introduction  When working on Kaggle1, which is a competition platform for data science, Python2 written in Notebook3(orJupyterNotebook[^JupyterNotebook]orGoogleColaboratory[^GoogleColaboratory])istheexecutionenvironment.]]Ithinkthereisa&amp;quot;highlyusedcode&amp;rdquo;.Inordertoreuseit,Iwillintroduceitinonecellasaformatthatiseasytocopyandpasteanyway.Wehopethatbyreusingthecontentsofthiscell,wecanimprovetheefficiencyofdataanalysisinKaggle.(Thisis“Kaggle&amp;rsquo;sinitialequipment”!)
*This article is based on the Notebook published by Kaggler (Kaggle participant) predecessors and the book [Technology of data analysis that wins at Kaggle]. However, it is the individual subjectivity as of December 2019. Therefore, please see for your reference.
#Conclusion
What is Kaggle&amp;rsquo;s initial equipment?
This cell!
#Display Notebook from IPython.core.interactiveshell import InteractiveShell InteractiveShell.</description>
    </item>
    
    <item>
      <title>[For data science] Oreole Jupyter cheat sheet [Jupyter Notebook/Lab]</title>
      <link>https://memotut.com/for-data-science-oreole-jupyter-cheat-sheet-jupyter-notebook-lab-0f5dd/</link>
      <pubDate>Thu, 28 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://memotut.com/for-data-science-oreole-jupyter-cheat-sheet-jupyter-notebook-lab-0f5dd/</guid>
      <description>I usually do **data analysis and model construction** mainly on Jupyter.  I will make a note of how many times I will research it. (Updated from time to time)
Development I want to reload the modified .py module Modules that have already been imported will be cached, or will not be updated when imported normally. ** You can reload (reimport) with the following. **
import importlib importlib.reload(hoge) # hoge is an imported module I didn&amp;rsquo;t know this much until recently, and I restarted every time, so it&amp;rsquo;s really a scale.</description>
    </item>
    
    <item>
      <title>Drawing a tree structure with D3.js in Jupyter Notebook</title>
      <link>https://memotut.com/drawing-a-tree-structure-with-d3.js-in-jupyter-notebook-72846/</link>
      <pubDate>Thu, 28 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://memotut.com/drawing-a-tree-structure-with-d3.js-in-jupyter-notebook-72846/</guid>
      <description># Thing you want to do  I want to draw tree-structured data beautifully with Jupyter Notebook or a web application! That is my motivation. I use Python because of the convenience of analyzing the original data, and I wanted to repeat analysis and visualization interactively.
Python There seem to be various ways to draw a tree structure in Python, and the first thing I can think of is networkxor[graphviz].AlthoughIuseagraphlibrarysuchas(https://graphviz.readthedocs.io/en/stable/), I think that it is difficult to express elaborately because it is a library intended to analyze the graph structure in the first place.</description>
    </item>
    
    <item>
      <title>Jupyter Notebook Magic Command My Summary</title>
      <link>https://memotut.com/jupyter-notebook-magic-command-my-summary-43765/</link>
      <pubDate>Mon, 25 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://memotut.com/jupyter-notebook-magic-command-my-summary-43765/</guid>
      <description>### Prerequisites   macOS Catalina 10.15.1 anaconda 4.17.12 jupyter-notebook 5.0.0 Python 3.6.9  What is a magic command Magic Commands is a mechanism provided by the IPython kernel. In addition to the functions related to the operation of Notebook, it provides utility functions such as directory movement and file list display.
Magic command basics Enter ``%&amp;rsquo;&amp;rsquo; at the beginning and then enter the command. The command to output the current directory is as follows.</description>
    </item>
    
    <item>
      <title>About Jupyter Notebook extension and nbextensions settings</title>
      <link>https://memotut.com/about-jupyter-notebook-extension-and-nbextensions-settings-20b04/</link>
      <pubDate>Fri, 15 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://memotut.com/about-jupyter-notebook-extension-and-nbextensions-settings-20b04/</guid>
      <description>As the title says, about personal settings for nbextensions.  Introduction Referenced site https://www.pynote.info/entry/jupyter-notebook-nbextensions
#Install pip install jupyter-contrib-nbextensions (pip install jupyter-nbextensions-configurator) # It seems that it is at the above point? #activation jupyter contrib nbextension install --user jupyter nbextensions_configurator enable --user If you want to uninstall or disable it, follow the steps below. Referenced site https://github.com/ipython-contrib/jupyter_contrib_nbextensions/issues/1012
#Invalidation jupyter contrib nbextension uninstall --user jupyter nbextensions_configurator disable --user #Uninstall pip uninstall jupyter-contrib-nbextensions pip uninstall jupyter-nbextensions-configurator nbextensions settings Referenced site https://qiita.</description>
    </item>
    
  </channel>
</rss>