<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Timestamp on Some Title</title>
    <link>https://japan2018.github.io/tags/timestamp/</link>
    <description>Recent content in Timestamp on Some Title</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 25 Nov 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://japan2018.github.io/tags/timestamp/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Precautions when using string for TmeStampType of PySpark</title>
      <link>https://japan2018.github.io/precautions-when-using-string-for-tmestamptype-of-pyspark-fcecc/</link>
      <pubDate>Mon, 25 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://japan2018.github.io/precautions-when-using-string-for-tmestamptype-of-pyspark-fcecc/</guid>
      <description>#Introduction  It is a story that there is a pattern that behaves unintentionally when the character string type of date format is carelessly used when calculating TimeStampType of PySpark.
Therefore, it is possible to operate on TimeStampType with string, but it is safer to use datetime.
#Example
A specific example will be described.
The example shown here is from PySPark 2.4.4.
Verification data With the following code, create a Spark DataFrame with date data of 2000/1/1 to 2000/1/5 and try the conditional processing for this date data.</description>
    </item>
    
  </channel>
</rss>