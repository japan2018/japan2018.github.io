<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>unittest on Some Title</title>
    <link>https://japan2018.github.io/tags/unittest/</link>
    <description>Recent content in unittest on Some Title</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 26 Apr 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://japan2018.github.io/tags/unittest/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>python setup.py test code that uses multiprocess</title>
      <link>https://japan2018.github.io/python-setup.py-test-code-that-uses-multiprocess-f8229/</link>
      <pubDate>Sun, 26 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://japan2018.github.io/python-setup.py-test-code-that-uses-multiprocess-f8229/</guid>
      <description># wrap up   Running unittest including multiprocess module in setup.py results in infinite loop Apparently it is a specification of the multiprocess module Temporarily rewrite &amp;ldquo;__main__&amp;rdquo; as a workaround  Premise In python it uses the &amp;ldquo;multiprocess&amp;rdquo; module to run functions in multiprocess.
The formula is easy to understand how to use and sample code. https://docs.python.org/ja/3/library/multiprocessing.html
Now look at the following code
from multiprocessing import Pool def f(x): return x*x def main(): with Pool(5) as p: print(p.</description>
    </item>
    
  </channel>
</rss>