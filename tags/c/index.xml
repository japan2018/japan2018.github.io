<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title> C on Some Title</title>
    <link>https://japan2018.github.io/tags/c/</link>
    <description>Recent content in  C on Some Title</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 06 Jan 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://japan2018.github.io/tags/c/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>C language to see and remember Part 5 Call C language from Python (argument) array</title>
      <link>https://japan2018.github.io/c-language-to-see-and-remember-part-5-call-c-language-from-python-argument-array-fdd3d/</link>
      <pubDate>Mon, 06 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://japan2018.github.io/c-language-to-see-and-remember-part-5-call-c-language-from-python-argument-array-fdd3d/</guid>
      <description>Pythonからfloatの配列を渡し、タプルで合計と平均を返す。  import myModule as capi import random x=[random.uniform(0, 100) for x in range(100)] s=0.0 for a in x: s=s+a print(&amp;#34;c &amp;#34;,s,s/len(x)) a=capi.fsum_avr(x) print(&amp;#34;py&amp;#34;,a) 実行すると &amp;gt;python capi.py py 5025.24247203747 50.252424720374705 c (5025.24247203747, 50.252424720374705) #include &amp;lt;Python.h&amp;gt;static PyObject* fsum_avr(PyObject* self, PyObject* args) { long n; double sum=0.0,avr,a; PyObject* c_list, *item; if (!PyArg_ParseTuple(args, &amp;#34;O&amp;#34;, &amp;amp;c_list)) return NULL; // Check list  if PyList_Check(c_list) n = PyList_Size(c_list); else return NULL; for (int i = 0; i &amp;lt; n; i++){ item = PyList_GetItem(c_list, i); a = PyFloat_AsDouble(item); // Increment the reference count  sum = sum + a; Py_DECREF(item); // Decrement the reference count  } avr=sum/n; return Py_BuildValue(&amp;#34;(dd)&amp;#34;,sum,avr); } static PyMethodDef myMethods[] = { { &amp;#34;fsum_avr&amp;#34;,fsum_avr, METH_VARARGS, &amp;#34;sum avr&amp;#34;}, { NULL } }; static struct PyModuleDef myModule = { PyModuleDef_HEAD_INIT,&amp;#34;myModule&amp;#34;,&amp;#34;C API Module&amp;#34;,-1,myMethods }; PyMODINIT_FUNC PyInit_myModule(void){ return PyModule_Create(&amp;amp;myModule); } 注目ポイント 1.</description>
    </item>
    
  </channel>
</rss>