<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>FastAPI on Memo Tut</title>
    <link>https://memotut.com/tags/fastapi/</link>
    <description>Recent content in FastAPI on Memo Tut</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 31 May 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://memotut.com/tags/fastapi/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[Python] Build a lightweight FastAPI development environment using Docker</title>
      <link>https://memotut.com/build-a-lightweight-fastapi-development-environment-using-docker-fcd38/</link>
      <pubDate>Sun, 31 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://memotut.com/build-a-lightweight-fastapi-development-environment-using-docker-fcd38/</guid>
      <description>## Introduction  I often use FastAPI recently, and I wanted to quickly build it with Docker and dispose of it. As a memo, I&amp;rsquo;d like to leave a lightweight construction method.
Preparation  Environment that can use Docker and Docker Compose  $ docker --version Docker version 19.03.8, build afacb8b7f0  The file structure looks like this  . ├── Dockerfile ├── docker-compose.yml ├── main.py └── requirements.txt Source You can clone from here https://github.</description>
    </item>
    
    <item>
      <title>[Python] Trying to make a typed web application with Python&#39;s web framework ``FastAPI&#39;&#39; and TypeScriptOpenAPI-technology stack for machine learning webapp</title>
      <link>https://memotut.com/trying-to-make-a-typed-web-application-with-pythons-web-framework-fastapi-and-typescriptopenapi-technology-stack-for-machine-learning-webapp-9278f/</link>
      <pubDate>Tue, 05 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://memotut.com/trying-to-make-a-typed-web-application-with-pythons-web-framework-fastapi-and-typescriptopenapi-technology-stack-for-machine-learning-webapp-9278f/</guid>
      <description># Intro  Introducing FastAPI+TypeScript+OpenAPI as a technology stack for creating web applications with machine learning and image processing implemented in Python as the back end.
#Motivation
 I want to set up a web server (API server) quickly with Python -Uses like using Flask until now &amp;ldquo;In Python&amp;rdquo; -Because it is a machine learning / image processing service &amp;ldquo;Crispy&amp;rdquo; -I want to enjoy validation I want type assurance for both server and client -Machine learning and image processing apps tend to have many parameters.</description>
    </item>
    
    <item>
      <title>[Python] Machine learning model inference web API server configuration [FastAPI implementation example available]</title>
      <link>https://memotut.com/machine-learning-model-inference-web-api-server-configuration-fastapi-implementation-example-available-9803f/</link>
      <pubDate>Tue, 21 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://memotut.com/machine-learning-model-inference-web-api-server-configuration-fastapi-implementation-example-available-9803f/</guid>
      <description>## Purpose of this article  Introducing a typical configuration of machine learning inference web API. I think that the content can be read without necessarily having knowledge of WEB or machine learning. (Excluding implementation example) The configuration to introduce is based on my experience of making inference web APIs for some machine learning models in my work, but since it is my personal opinion, if you have any suggestions, please let me know in the comments.</description>
    </item>
    
    <item>
      <title>[Python] Create a new corona infection site map [FastAPI/PostGIS/deck.gl(React)] (Data processing)</title>
      <link>https://memotut.com/create-a-new-corona-infection-site-map-fastapi-postgis-deck.glreact-data-processing-579fc/</link>
      <pubDate>Tue, 31 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://memotut.com/create-a-new-corona-infection-site-map-fastapi-postgis-deck.glreact-data-processing-579fc/</guid>
      <description>New Corona... The spread of infection is not stopping...  I was thinking that I would like to put some data on a map and visualize it as a fledgling GIS shop, but I was afraid that most of the open data was collected in PDF format.
But! ! ! ! ! !
For non-profit purposes, sites that provide wonderful data with free data duplication, quotation, and reprint (https://gis.jag-japan.com/covid19jp/, so I would like to use this data to express it on the map!</description>
    </item>
    
    <item>
      <title>[Python] [FastAPI] Getting started with ASAPI Web framework FastAPI made in Python</title>
      <link>https://memotut.com/fastapi-getting-started-with-asapi-web-framework-fastapi-made-in-python-75d9c/</link>
      <pubDate>Fri, 03 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://memotut.com/fastapi-getting-started-with-asapi-web-framework-fastapi-made-in-python-75d9c/</guid>
      <description># FastAPI  The Python web framework, which is a micro-framework like Flask. Its strengths are high performance, ease of writing, design with a strong focus on production operations, and modern functions.
FastAPI is written on the shoulder of Starlette, and asynchronous processing is easy to handle. In particular, it has the following features.
 ASGI websocket support GraphQL support Background process is easy to handle Automatic document generation with python type hint (Swagger UI) pydantic based data validation  Frankly, it&amp;rsquo;s very similar to responder.</description>
    </item>
    
    <item>
      <title>[Python] Performance comparison of Python web frameworks (Django, Flask, responder, FastAPI, japronto)</title>
      <link>https://memotut.com/performance-comparison-of-python-web-frameworks-django-flask-responder-fastapi-japronto-0ad26/</link>
      <pubDate>Thu, 02 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>https://memotut.com/performance-comparison-of-python-web-frameworks-django-flask-responder-fastapi-japronto-0ad26/</guid>
      <description>I made a simple API using the following Python Web framework and tried a load test.   Django (2.X) Flask FastAPI responder japronto  As a result, I found the following roughly!
 Performance can be said to be &amp;ldquo;japronto &amp;raquo;&amp;gt; FastAPI&amp;gt; responder &amp;raquo;&amp;gt; Flask ~ Django&amp;rdquo; FastAPI and responder are single workers, and if they request about 100-1000 seconds per second**, they have overwhelming performance in the python world almost the same level as japronto**  (The code used for the verification is here.</description>
    </item>
    
    <item>
      <title>[Python] Getting started with Pydantic</title>
      <link>https://memotut.com/getting-started-with-pydantic-d1dcb/</link>
      <pubDate>Mon, 04 Nov 2019 00:00:00 +0000</pubDate>
      
      <guid>https://memotut.com/getting-started-with-pydantic-d1dcb/</guid>
      <description>Hello, are you Kakyo.  This time, I would like to write an article about pydantic.
What is Pydantic Pydantic is a library that uses Python type annotations to provide run-time type hints and to easily provide error settings when validating data.
This library will help you define your database model in SQLAlchemy.
model First of all, in defining it, define as follows.
from datetime import datetime from typing import List from pydantic import BaseModel class Summer(BaseModel): id: int declare the type as name: str # (variable): (type) You can also define a default value using friends: List[int] = [] # &amp;#34;=&amp;#34; created_at: datetime external_data={ &amp;#39;id&amp;#39;: &amp;#39;1&amp;#39;, &amp;#39;name&amp;#39;:&amp;#39;Beast senior&amp;#39;, &amp;#39;created_at&amp;#39;: &amp;#39;2019-11-03 03:34&amp;#39;, &amp;#39;friends&amp;#39;: [114,&amp;#39;514&amp;#39;] } summer = Summer(**external_data) print(summer.</description>
    </item>
    
  </channel>
</rss>