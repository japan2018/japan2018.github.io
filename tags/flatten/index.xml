<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>flatten on Memo Tut</title>
    <link>https://memotut.com/tags/flatten/</link>
    <description>Recent content in flatten on Memo Tut</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 31 Dec 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://memotut.com/tags/flatten/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[Python] Let&#39;s stop copying. Introducing the flati module that flattens in Python</title>
      <link>https://memotut.com/lets-stop-copying.-introducing-the-flati-module-that-flattens-in-python-9570c/</link>
      <pubDate>Tue, 31 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://memotut.com/lets-stop-copying.-introducing-the-flati-module-that-flattens-in-python-9570c/</guid>
      <description>Chao...â€   #Introduction Sometimes you want to combine, or flatten, a nested (nested) list in Python. If you do a web search, you&amp;rsquo;ll be able to find information on how to deal with such cases immediately. But isn&amp;rsquo;t it annoying to copy and paste it one by one? I&amp;rsquo;m tired. So, in this article, I will introduce the module flati that flattens in Python.
Currently it supports Python 2.7 and Python 3.</description>
    </item>
    
    <item>
      <title>[Python] flatten in python</title>
      <link>https://memotut.com/flatten-in-python-fb859/</link>
      <pubDate>Fri, 17 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>https://memotut.com/flatten-in-python-fb859/</guid>
      <description>Ruby has a method called flatten that flattens a nested array into a one-dimensional array, but sometimes I want to use it in python, so I looked into what kind of method there is.  &amp;gt;&amp;gt;&amp;gt; flatten([[1, 2], [3, [4, 5]]]) [1, 2, 3, 4, 5] &amp;gt;&amp;gt;&amp;gt; flatten([1, [2, 3], [[4, [5, 6]], 7]]) [1, 2, 3, 4, 5, 6, 7] #Qiita found method
http://qiita.com/kento1218@github/items/f3baf574aadb3d1cbeae
Make it a generator function I made it a generator function by referring to the method I found in Qiita.</description>
    </item>
    
  </channel>
</rss>